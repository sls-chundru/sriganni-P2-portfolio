[
  {
    "objectID": "tidytuesday-exercise/tidytuesday-exercise.html",
    "href": "tidytuesday-exercise/tidytuesday-exercise.html",
    "title": "Tidy Tuesday Exercise",
    "section": "",
    "text": "Placeholder file for the future Tidy Tuesday exercise."
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "Sri Lakshmi - DA Portfolio",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "",
    "text": "Collin Real Contributed to this exercise\nThe structure below is one possible setup for a data analysis project (including the course project). For a manuscript, adjust as needed. You don’t need to have exactly these sections, but the content covering those sections should be addressed.\nThis uses MS Word as output format. See here for more information. You can switch to other formats, like html or pdf. See the Quarto documentation for other formats."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "General Background Information",
    "text": "General Background Information\nProvide enough background on your topic that others can understand the why and how of your analysis"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "Description of data and data source",
    "text": "Description of data and data source\nDescribe what the data is, what it contains, where it is from, etc. Eventually this might be part of a methods section.\nThe original data is a simple made-up data-set in an Excel file which is exampledata.xlsx.The dataset contains the variables Height, weight and Gender columns of a few imaginary individuals.It is a small dataset with 15 rows and 3 columns.The dataset purposefully contains some faulty entries that need to be cleaned. The data is used to demonstrate the analysis of the data using R. I have added 2 columns to the data which are Income and Eye Color. The data is saved as exampledata2.xlsx. I also added descriptions for the new variables to the codebook sheet in the excel file."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "Questions/Hypotheses to be addressed",
    "text": "Questions/Hypotheses to be addressed\nState the research questions you plan to answer with this analysis.\nTo cite other work (important everywhere, but likely happens first in introduction), make sure your references are in the bibtex file specified in the YAML header above (here dataanalysis_template_references.bib) and have the right bibtex key. Then you can include like this:\nExamples of reproducible research projects can for instance be found in (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, Shen, & Handel, 2020)"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "Data aquisition",
    "text": "Data aquisition\nAs applicable, explain where and how you got the data. If you directly import the data from an online source, you can combine this section with the next."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "Data import and cleaning",
    "text": "Data import and cleaning\nWrite code that reads in the file and cleans it so it’s ready for analysis. Since this will be fairly long code for most datasets, it might be a good idea to have it in one or several R scripts. If that is the case, explain here briefly what kind of cleaning/processing you do, and provide more details and well documented code somewhere (e.g. as supplement in a paper). All materials, including files that contain code, should be commented well so everyone can follow along."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "Statistical analysis",
    "text": "Statistical analysis\nExplain anything related to your statistical analyses."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "Exploratory/Descriptive analysis",
    "text": "Exploratory/Descriptive analysis\nUse a combination of text/tables/figures to explore and describe your data. Show the most important descriptive results here. Additional ones should go in the supplement. Even more can be in the R and Quarto files that are part of your project.\nTable 1 shows a summary of the data.\nNote the loading of the data providing a relative path using the ../../ notation. (Two dots means a folder up). You never want to specify an absolute path like C:\\ahandel\\myproject\\results\\ because if you share this with someone, it won’t work for them since they don’t have that path. You can also use the here R package to create paths. See examples of that below. I recommend the here package, but I’m showing the other approach here just in case you encounter it.\n\n\n\n\nTable 1: Data summary table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_type\nskim_variable\nn_missing\ncomplete_rate\nfactor.ordered\nfactor.n_unique\nfactor.top_counts\nnumeric.mean\nnumeric.sd\nnumeric.p0\nnumeric.p25\nnumeric.p50\nnumeric.p75\nnumeric.p100\nnumeric.hist\n\n\n\n\nfactor\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nnumeric\nHeight\n0\n1\nNA\nNA\nNA\n165.66667\n15.976545\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nnumeric\nWeight\n0\n1\nNA\nNA\nNA\n70.11111\n21.245261\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nnumeric\nIncome\n0\n1\nNA\nNA\nNA\n84444.44444\n12914.247085\n60000\n80000\n85000\n95000\n100000\n▂▂▂▇▇\n\n\nnumeric\nBMI\n0\n1\nNA\nNA\nNA\n25.66667\n6.964194\n19\n22\n23\n25\n39\n▇▃▁▁▃"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "Basic statistical analysis",
    "text": "Basic statistical analysis\nTo get some further insight into your data, if reasonable you could compute simple statistics (e.g. simple models with 1 predictor) to look for associations between your outcome(s) and each individual predictor variable. Though note that unless you pre-specified the outcome and main exposure, any “p&lt;0.05 means statistical significance” interpretation is not valid.\nFigure 1 shows a scatterplot figure produced by one of the R scripts.\n\n\n\n\n\nFigure 1: Height and weight stratified by gender."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "Full analysis",
    "text": "Full analysis\nUse one or several suitable statistical/machine learning methods to analyze your data and to produce meaningful figures, tables, etc. This might again be code that is best placed in one or several separate R scripts that need to be well documented. You want the code to produce figures and data ready for display as tables, and save those. Then you load them here.\nExample Table 2 shows a summary of a linear model fit.\n\n\n\n\nTable 2: Linear model fit table.\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n149.2726967\n23.3823360\n6.3839942\n0.0013962\n\n\nWeight\n0.2623972\n0.3512436\n0.7470519\n0.4886517\n\n\nGenderM\n-2.1244913\n15.5488953\n-0.1366329\n0.8966520\n\n\nGenderO\n-4.7644739\n19.0114155\n-0.2506112\n0.8120871"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "Summary and Interpretation",
    "text": "Summary and Interpretation\nSummarize what you did, what you found and what it means."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "Strengths and Limitations",
    "text": "Strengths and Limitations\nDiscuss what you perceive as strengths and limitations of your analysis."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "Conclusions",
    "text": "Conclusions\nWhat are the main take-home messages?\nInclude citations in your Rmd file using bibtex, the list of references will automatically be placed at the end\nThis paper (Leek & Peng, 2015) discusses types of analyses.\nThese papers (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, et al., 2020) are good examples of papers published using a fully reproducible setup similar to the one shown in this template.\nNote that this cited reference will show up at the end of the document, the reference formatting is determined by the CSL file specified in the YAML header. Many more style files for almost any journal are available. You also specify the location of your bibtex reference file in the YAML. You can call your reference file anything you like, I just used the generic word references.bib but giving it a more descriptive name is probably better.\n\n\n\n\n\n\nFigure 2: Height and weight stratified by gender.\n\n\n\n\nThe Boxplot shows the distribution of each section of Eye color:\n1.Black Eye Color: Broad range of heights with a median around 170cm implicating that High Variability in height among individuals with black eyes.\n2.Blue Eye Color: Narrow range around a median of 165cm implicating that Heights are more consistent among those blue eyes.\n3.Brown Eye Color:Highest median height below 170 cm ,with narrow variation implicating that Generally taller, with less height variability compared to black eyes.\n4.Green Eye Color:Median near 165cm, very tight range implicating that compact height distribution, showing strong central tendency.\n5.Hazel Eye Color:Median similar to green eyes, with a broader range implicating moderate variability,with heights centered around the median.\n\n\n\n\n\nFigure 3: Height and weight stratified by gender.\n\n\n\n\nThe scatter plot displays the relationship between weight(X-axis) and income(y-axis).The data points are widely dispersed without a clear trend, indicating that there is nos significant relationship or dependency between the weight of individuals and their income in this particular dataset.\n\n\n\n\nTable 3: Linear model fit table.\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n195.0790698\n42.8951725\n4.5478094\n0.0104350\n\n\nIncome\n-0.0004279\n0.0004122\n-1.0380663\n0.3578676\n\n\nEye Colorblue\n15.6825581\n18.6712442\n0.8399311\n0.4482183\n\n\nEye Colorbrown\n-2.2069767\n20.7739821\n-0.1062375\n0.9205086\n\n\nEye Colorgreen\n-0.9953488\n23.5865057\n-0.0421999\n0.9683618\n\n\nEye Colorhazel\n10.0837209\n21.6599511\n0.4655468\n0.6657578\n\n\n\n\n\n\nThe regression results indicate that height is modeled with income and eye color as predictors show that 1.Intercept(195, p-value=0.0104): The intercept represents the estimated height when all the predictors are zero.The sisgnificant p-value indicates that this base height is statistically significant.\n2.Income (0.000428, p-value = 0.358): The coefficient for income indicates that for each unit increase in income, height is expected to increase by approximately 0.000428 units. The p-value suggests that this effect is not statistically significant, implying there might be no strong linear relationship between income and height.\n3.Eye Color Blue (-15.7, p-value = 0.448): This coefficient suggests that individuals with blue eyes are, on average, 15.7 units shorter than the reference eye color category. The high p-value indicates that this difference is not statistically significant.\n4.Eye Color Brown (-2.21, p-value = 0.921): Similar to blue, having brown eyes correlates with being 2.21 units shorter than the reference group, but this is also not statistically significant.\n5.Eye Color Green (-0.95, p-value = 0.966): This result suggests almost no difference in height compared to the reference eye color, and the effect is not statistically significant.\n6.Eye Color Hazel (10.1, p-value = 0.666): This suggests that individuals with hazel eyes are on average 10.1 units taller than the reference group, although this is not statistically significant.\nThe model suggests that neither income nor eye color has a statistically significant effect on height, based on the p-values associated with each predictor. This implies that variations in height within this dataset are likely due to factors not included in this model. The overall effectiveness of the model in predicting height based on these variables might be limited, indicating potential need for considering other variables or a different modeling approach. # References"
  },
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "Sri Lakshmi - DA Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "Sri Lakshmi - DA Portfolio",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at /Users/venkata/Documents/GitHub/sriganni-P2-portfolio/starter-analysis-exercise\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"data\",\"raw-data\",\"exampledata2.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`        \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                   \n1 Height          height in centimeters                 numeric value &gt;0 or NA  \n2 Weight          weight in kilograms                   numeric value &gt;0 or NA  \n3 Gender          identified gender (male/female/other) M/F/O/NA                \n4 Income          Individual Income in usd              numeric value &gt;0 or NA  \n5 Eye Color       person's eye color                    brown/blue/green/black/…\n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height      &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"1…\n$ Weight      &lt;chr&gt; \"80\", \"70\", \"60\", \"76\", \"90\", \"55\", \"90\", \"110\", \"54\", \"70…\n$ Gender      &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F…\n$ Income      &lt;dbl&gt; 70000, 80000, 90000, 95000, 75000, 85000, 89000, 85000, 92…\n$ `Eye Color` &lt;chr&gt; \"brown\", \"blue\", \"green\", \"hazel\", \"black\", \"blue\", \"green…\n\nsummary(rawdata)\n\n    Height             Weight             Gender              Income      \n Length:14          Length:14          Length:14          Min.   : 60000  \n Class :character   Class :character   Class :character   1st Qu.: 78500  \n Mode  :character   Mode  :character   Mode  :character   Median : 87000  \n                                                          Mean   : 86071  \n                                                          3rd Qu.: 94250  \n                                                          Max.   :110000  \n  Eye Color        \n Length:14         \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender Income `Eye Color`\n  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;      \n1 180    80     M       70000 brown      \n2 175    70     O       80000 blue       \n3 sixty  60     F       90000 green      \n4 178    76     F       95000 hazel      \n5 192    90     NA      75000 black      \n6 6      55     F       85000 blue       \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n4\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nWeight\n0\n1\n2\n4\n0\n12\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nEye Color\n0\n1\n4\n5\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nIncome\n0\n1\n86071.43\n12916.68\n60000\n78500\n87000\n94250\n110000\n▃▆▇▇▂\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nWeight\n0\n1\n2\n4\n0\n11\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nEye Color\n0\n1\n4\n5\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n151.62\n46.46\n6\n154\n165\n175\n192\n▁▁▁▂▇\n\n\nIncome\n0\n1\n85769.23\n13392.50\n60000\n78000\n85000\n95000\n110000\n▃▆▆▇▂\n\n\n\n\nhist(d1$Height)\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nWeight\n0\n1\n2\n4\n0\n11\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nEye Color\n0\n1\n4\n5\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.23\n16.52\n133\n155\n166\n178\n192\n▂▇▆▆▃\n\n\nIncome\n0\n1\n85769.23\n13392.50\n60000\n78000\n85000\n95000\n110000\n▃▆▆▇▂\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n12\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nWeight\n0\n1\n2\n3\n0\n10\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nEye Color\n0\n1\n4\n5\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n166.92\n16.04\n133\n155.75\n166\n178.5\n192\n▂▇▇▇▅\n\n\nIncome\n0\n1\n86416.67\n13773.88\n60000\n78750.00\n87000\n95250.0\n110000\n▃▃▆▇▂\n\n\n\n\ndplyr::glimpse(d3)\n\nRows: 12\nColumns: 5\n$ Height      &lt;dbl&gt; 180, 175, 178, 192, 183, 156, 166, 155, 165, 133, 166, 154\n$ Weight      &lt;chr&gt; \"80\", \"70\", \"76\", \"90\", \"55\", \"90\", \"110\", \"54\", \"NA\", \"45…\n$ Gender      &lt;chr&gt; \"M\", \"O\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"F\", \"F\", \"M\", \"M\"\n$ Income      &lt;dbl&gt; 70000, 80000, 95000, 75000, 85000, 89000, 85000, 92000, 11…\n$ `Eye Color` &lt;chr&gt; \"brown\", \"blue\", \"hazel\", \"black\", \"blue\", \"green\", \"blue\"…\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nd3$Weight &lt;- as.numeric(d3$Weight)\n\nWarning: NAs introduced by coercion\n\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n12\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nEye Color\n0\n1\n4\n5\n0\n5\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nF: 4, M: 4, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n166.92\n16.04\n133\n155.75\n166\n178.5\n192\n▂▇▇▇▅\n\n\nWeight\n1\n0.92\n70.45\n20.65\n45\n54.50\n70\n85.0\n110\n▇▂▃▃▂\n\n\nIncome\n0\n1.00\n86416.67\n13773.88\n60000\n78750.00\n87000\n95250.0\n110000\n▃▃▆▇▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n10\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nEye Color\n0\n1\n4\n5\n0\n5\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nF: 4, M: 4, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.0\n165.60\n15.06\n133\n158.25\n166\n177.25\n183\n▂▁▃▆▇\n\n\nWeight\n1\n0.9\n70.11\n21.25\n45\n55.00\n70\n80.00\n110\n▇▂▃▂▂\n\n\nIncome\n0\n1.0\n87000.00\n14613.54\n60000\n81250.00\n87000\n95750.00\n110000\n▅▂▇▇▂\n\n\n\n\ndplyr::glimpse(d4)\n\nRows: 10\nColumns: 5\n$ Height      &lt;dbl&gt; 180, 175, 178, 183, 156, 166, 165, 133, 166, 154\n$ Weight      &lt;dbl&gt; 80, 70, 76, 55, 90, 110, NA, 45, 55, 50\n$ Gender      &lt;fct&gt; M, O, F, F, O, M, F, F, M, M\n$ Income      &lt;dbl&gt; 70000, 80000, 95000, 85000, 89000, 85000, 110000, 100000, …\n$ `Eye Color` &lt;chr&gt; \"brown\", \"blue\", \"hazel\", \"blue\", \"green\", \"blue\", \"blue\",…\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"data\",\"processed-data\",\"processeddata2.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "Sri Lakshmi - DA Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda.html",
    "href": "starter-analysis-exercise/code/eda-code/eda.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at /Users/venkata/Documents/GitHub/sriganni-P2-portfolio/starter-analysis-exercise\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          5     \n_______________________          \nColumn type frequency:           \n  factor                   1     \n  numeric                  4     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate    mean       sd    p0   p25   p50   p75\n1 Height                0             1   166.     16.0    133   156   166   178\n2 Weight                0             1    70.1    21.2     45    55    70    80\n3 Income                0             1 84444.  12914.   60000 80000 85000 95000\n4 BMI                   0             1    25.7     6.96    19    22    23    25\n    p100 hist \n1    183 ▂▁▃▃▇\n2    110 ▇▂▃▂▂\n3 100000 ▂▂▂▇▇\n4     39 ▇▃▁▁▃\n\n# save to file\nsummarytable_file = here(\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nfigure_file = here(\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nfigure_file = here(\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html",
    "href": "presentation-exercise/presentation-exercise.html",
    "title": "Presentation Exercise",
    "section": "",
    "text": "Introduction\nI have analyzed the head to head matchup of president bidenna and trump in the 2020 election. The data is collected from the historical presidential poll data for Biden and Trump starting from February 27, 2020. The data is filtered, and averages are computed to create an interactive plot using the highcharter library. The plot displays the poll percentages for both candidates over time with a rolling average to smooth out fluctuations. The chart also includes scatter points for the individual poll data and annotations highlighting the latest average poll percentages for both candidates. This visualization offers a clear view of the polling trends leading up to the 2020 presidential election.\nOriginal copy of this plot can be found here : https://projects.fivethirtyeight.com/polls/president-general/2020/national/.\n\n# Load necessary libraries\n# Load necessary libraries\nlibrary(highcharter)\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\n\nHighcharts (www.highcharts.com) is a Highsoft software product which is\n\n\nnot free for commercial and Governmental use\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\nlibrary(zoo)\n\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n# Load the data\nfile_path &lt;- \"president_polls_historical.csv\"\ndata &lt;- read.csv(file_path)\n\n# Filter and process the data\npoll_data &lt;- data %&gt;%\n  select(start_date, answer, pct) %&gt;%\n  filter(answer %in% c(\"Biden\", \"Trump\")) %&gt;%\n  mutate(start_date = as.Date(start_date, format = \"%m/%d/%y\")) %&gt;%\n  filter(start_date &gt;= as.Date(\"2020-02-27\")) %&gt;%\n  group_by(start_date, answer) %&gt;%\n  summarise(pct = mean(pct, na.rm = TRUE), .groups = 'drop') %&gt;%\n  pivot_wider(names_from = answer, values_from = pct) %&gt;%\n  complete(start_date = seq.Date(min(start_date), max(start_date), by = \"day\")) %&gt;%\n  fill(Biden, Trump, .direction = \"down\") %&gt;%\n  mutate(Biden = pmin(pmax(Biden, 40), 60),\n         Trump = pmin(pmax(Trump, 40), 60)) %&gt;%\n  mutate(Biden_avg = rollapply(Biden, width = 21, FUN = mean, fill = NA, align = \"center\"),\n         Trump_avg = rollapply(Trump, width = 21, FUN = mean, fill = NA, align = \"center\"))\n\n# Create the interactive plot\nhighchart() %&gt;%\n  hc_title(text = \"Who's ahead in the national polls?\") %&gt;%\n  hc_subtitle(text = \"An updating average of 2020 presidential general election polls, accounting for each poll’s quality, sample size and recency\") %&gt;%\n  hc_xAxis(categories = poll_data$start_date) %&gt;%\n  hc_yAxis(title = list(text = \"Poll Percentage (%)\"), max = 60, min = 40) %&gt;%\n  hc_add_series(name = \"Joseph R. Biden Jr.\", data = poll_data$Biden_avg, type = \"line\", color = \"#0000FF\") %&gt;%\n  hc_add_series(name = \"Donald Trump\", data = poll_data$Trump_avg, type = \"line\", color = \"#FF0000\") %&gt;%\n  hc_add_series(name = \"Biden Polls\", data = poll_data$Biden + rnorm(length(poll_data$Biden), sd = 2), type = \"scatter\", color = \"#0000FF\", marker = list(radius = 2, symbol = \"circle\")) %&gt;%\n  hc_add_series(name = \"Trump Polls\", data = poll_data$Trump + rnorm(length(poll_data$Trump), sd = 2), type = \"scatter\", color = \"#FF0000\", marker = list(radius = 2, symbol = \"circle\")) %&gt;%\n  hc_tooltip(shared = TRUE, pointFormat = \"{series.name}: &lt;b&gt;{point.y:.1f}%&lt;/b&gt;&lt;br/&gt;\") %&gt;%\n  hc_legend(enabled = TRUE) %&gt;%\n  hc_annotations(list(\n    labels = list(\n      list(point = list(x = nrow(poll_data) - 1, y = poll_data$Biden_avg[nrow(poll_data)]),\n           text = paste(\"Joseph R. Biden Jr.\", round(poll_data$Biden_avg[nrow(poll_data)], 1), \"%\"), \n           style = list(color = \"#0000FF\", fontWeight = \"bold\")),\n      list(point = list(x = nrow(poll_data) - 1, y = poll_data$Trump_avg[nrow(poll_data)]),\n           text = paste(\"Donald Trump\", round(poll_data$Trump_avg[nrow(poll_data)], 1), \"%\"), \n           style = list(color = \"#FF0000\", fontWeight = \"bold\"))\n    )\n  ))\n\n\n\n\n\nSimilar analysis can be done in the form of a table with colors for the percentages of Biden and Trump, along with the net result.\n\n# Load necessary libraries\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(readr)\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\n# Load the CSV file\nfile_path &lt;- \"president_polls_historical.csv\"\ndata &lt;- read_csv(file_path)\n\nRows: 16715 Columns: 48\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): pollster, sponsors, display_name, pollster_rating_name, methodolog...\ndbl (16): poll_id, pollster_id, pollster_rating_id, numeric_grade, pollscore...\nnum  (1): sponsor_ids\nlgl  (9): endorsed_candidate_id, endorsed_candidate_name, endorsed_candidate...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Filter the data to only include Biden and Trump results\nfiltered_data &lt;- data %&gt;% \n  filter(answer %in% c(\"Biden\", \"Trump\"))\n\nfiltered_data &lt;- filtered_data %&gt;% drop_na(sponsors)\n\n# Select only the first 50 rows\nfiltered_data &lt;- filtered_data %&gt;% slice(1:50)\n\n# Pivot the data to have 'Biden' and 'Trump' results in separate columns\npivot_data &lt;- filtered_data %&gt;% \n  pivot_wider(names_from = answer, values_from = pct) %&gt;% \n  rename(biden_pct = Biden, trump_pct = Trump)\n\n# Replace NA values with 100 - the valid percentage\npivot_data &lt;- pivot_data %&gt;%\n  mutate(biden_pct = ifelse(is.na(biden_pct), 100 - trump_pct, biden_pct),\n         trump_pct = ifelse(is.na(trump_pct), 100 - biden_pct, trump_pct))\n\n# Calculate net result\npivot_data &lt;- pivot_data %&gt;%\n  mutate(net_result = biden_pct - trump_pct)\n\n# Concatenate start_date and end_date to form the dates column\npivot_data &lt;- pivot_data %&gt;%\n  mutate(dates = paste(start_date, \"-\", end_date))\n\n# Select and reorder columns to match the image\nfinal_data &lt;- pivot_data %&gt;%\n  select(dates, sample_size, pollster, sponsors, biden_pct, trump_pct, net_result) %&gt;%\n  rename(DATES = dates, SAMPLE = sample_size, POLLSTER = pollster, SPONSOR = sponsors,\n         `BIDEN %` = biden_pct, `TRUMP %` = trump_pct, `NET RESULT` = net_result)\n\n# Format the data for percentages\nfinal_data &lt;- final_data %&gt;%\n  mutate(`BIDEN %` = sprintf(\"%.1f%%\", `BIDEN %`),\n         `TRUMP %` = sprintf(\"%.1f%%\", `TRUMP %`),\n         `NET RESULT` = sprintf(\"%.1f\", `NET RESULT`))\n\n# Create the table with colors\nfinal_data %&gt;%\n  kbl() %&gt;%\n  kable_styling(full_width = F) %&gt;%\n  column_spec(5, background = \"#DCE6F1\") %&gt;%\n  column_spec(6, background = \"#F4CCCC\") %&gt;%\n  row_spec(0, bold = T)\n\n\n\n\nDATES\nSAMPLE\nPOLLSTER\nSPONSOR\nBIDEN %\nTRUMP %\nNET RESULT\n\n\n\n\n10/31/20 - 11/3/20\n2400\nLake Research\nNational Women's Law Center\n51.0%\n49.0%\n2.0\n\n\n10/31/20 - 11/3/20\n2400\nLake Research\nNational Women's Law Center\n52.0%\n48.0%\n4.0\n\n\n11/1/20 - 11/2/20\n400\nInsiderAdvantage\nFOX35 Orlando\n47.0%\n53.0%\n-6.0\n\n\n11/1/20 - 11/2/20\n400\nInsiderAdvantage\nFOX35 Orlando\n51.8%\n48.2%\n3.6\n\n\n10/31/20 - 11/2/20\n1500\nYouGov\nEconomist\n49.0%\n51.0%\n-2.0\n\n\n10/31/20 - 11/2/20\n1500\nYouGov\nEconomist\n60.0%\n40.0%\n20.0\n\n\n10/31/20 - 11/2/20\n1363\nYouGov\nEconomist\n53.0%\n47.0%\n6.0\n\n\n10/31/20 - 11/2/20\n1363\nYouGov\nEconomist\n57.0%\n43.0%\n14.0\n\n\n10/31/20 - 11/2/20\n1333\nIpsos\nReuters\n51.0%\n49.0%\n2.0\n\n\n10/31/20 - 11/2/20\n1333\nIpsos\nReuters\n54.0%\n46.0%\n8.0\n\n\n10/31/20 - 11/2/20\n1146\nIpsos\nReuters\n52.0%\n48.0%\n4.0\n\n\n10/31/20 - 11/2/20\n1146\nIpsos\nReuters\n55.0%\n45.0%\n10.0\n\n\n10/31/20 - 11/2/20\n914\nIpsos\nReuters\n52.0%\n48.0%\n4.0\n\n\n10/31/20 - 11/2/20\n914\nIpsos\nReuters\n55.0%\n45.0%\n10.0\n\n\n10/31/20 - 11/2/20\n28240\nSurveyMonkey\nAxios\n52.0%\n48.0%\n4.0\n\n\n10/31/20 - 11/2/20\n28240\nSurveyMonkey\nAxios\n55.0%\n45.0%\n10.0\n\n\n10/31/20 - 11/2/20\n28240\nSurveyMonkey\nAxios\n52.0%\n48.0%\n4.0\n\n\n10/31/20 - 11/2/20\n28240\nSurveyMonkey\nAxios\n54.0%\n46.0%\n8.0\n\n\n10/31/20 - 11/2/20\n2813\nHarrisX\nThe Hill\n51.0%\n49.0%\n2.0\n\n\n10/31/20 - 11/2/20\n2813\nHarrisX\nThe Hill\n51.0%\n49.0%\n2.0\n\n\n10/31/20 - 11/2/20\n2297\nHarrisX\nThe Hill\n52.0%\n48.0%\n4.0\n\n\n10/31/20 - 11/2/20\n2297\nHarrisX\nThe Hill\n52.0%\n48.0%\n4.0\n\n\n10/29/20 - 11/2/20\n1212\nTIPP\nInvestor's Business Daily\n50.2%\n49.8%\n0.4\n\n\n10/29/20 - 11/2/20\n1212\nTIPP\nInvestor's Business Daily\n53.8%\n46.2%\n7.6\n\n\n10/29/20 - 11/2/20\n1212\nTIPP\nInvestor's Business Daily\n50.7%\n49.3%\n1.4\n\n\n10/29/20 - 11/2/20\n1212\nTIPP\nInvestor's Business Daily\n54.1%\n45.9%\n8.2\n\n\n10/27/20 - 11/2/20\n610\nIpsos\nReuters\n50.0%\n50.0%\n0.0\n\n\n10/27/20 - 11/2/20\n610\nIpsos\nReuters\n52.0%\n48.0%\n4.0\n\n\n10/27/20 - 11/2/20\n610\nIpsos\nReuters\n50.0%\n50.0%\n0.0\n\n\n10/27/20 - 11/2/20\n610\nIpsos\nReuters\n53.0%\n47.0%\n6.0\n\n\n10/20/20 - 11/2/20\n367\nSurveyMonkey\nAxios\n32.0%\n68.0%\n-36.0\n\n\n10/20/20 - 11/2/20\n367\nSurveyMonkey\nAxios\n34.0%\n66.0%\n-32.0\n\n\n10/20/20 - 11/2/20\n367\nSurveyMonkey\nAxios\n33.0%\n67.0%\n-34.0\n\n\n10/20/20 - 11/2/20\n367\nSurveyMonkey\nAxios\n34.0%\n66.0%\n-32.0\n\n\n10/20/20 - 11/2/20\n816\nSurveyMonkey\nAxios\n32.0%\n68.0%\n-36.0\n\n\n10/20/20 - 11/2/20\n816\nSurveyMonkey\nAxios\n33.0%\n67.0%\n-34.0\n\n\n10/20/20 - 11/2/20\n816\nSurveyMonkey\nAxios\n32.0%\n68.0%\n-36.0\n\n\n10/20/20 - 11/2/20\n816\nSurveyMonkey\nAxios\n33.0%\n67.0%\n-34.0\n\n\n10/20/20 - 11/2/20\n2814\nSurveyMonkey\nAxios\n55.0%\n45.0%\n10.0\n\n\n10/20/20 - 11/2/20\n2814\nSurveyMonkey\nAxios\n57.0%\n43.0%\n14.0\n\n\n10/20/20 - 11/2/20\n2814\nSurveyMonkey\nAxios\n54.0%\n46.0%\n8.0\n\n\n10/20/20 - 11/2/20\n2814\nSurveyMonkey\nAxios\n56.0%\n44.0%\n12.0\n\n\n10/20/20 - 11/2/20\n4142\nSurveyMonkey\nAxios\n62.0%\n38.0%\n24.0\n\n\n10/20/20 - 11/2/20\n4142\nSurveyMonkey\nAxios\n65.0%\n35.0%\n30.0\n\n\n10/20/20 - 11/2/20\n4142\nSurveyMonkey\nAxios\n62.0%\n38.0%\n24.0\n\n\n10/20/20 - 11/2/20\n4142\nSurveyMonkey\nAxios\n65.0%\n35.0%\n30.0\n\n\n10/20/20 - 11/2/20\n906\nSurveyMonkey\nAxios\n68.0%\n32.0%\n36.0\n\n\n10/20/20 - 11/2/20\n906\nSurveyMonkey\nAxios\n72.0%\n28.0%\n44.0\n\n\n10/20/20 - 11/2/20\n906\nSurveyMonkey\nAxios\n71.0%\n29.0%\n42.0\n\n\n10/20/20 - 11/2/20\n906\nSurveyMonkey\nAxios\n74.0%\n26.0%\n48.0"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html",
    "href": "coding-exercise/coding-exercise.html",
    "title": "R Coding Exercise",
    "section": "",
    "text": "1.Loading required libraries:\nWe will be using the dslabs package to access the gapminder dataset and the dplyr package for data manipulation tasks.\n\nlibrary(\"dslabs\") #Accessing the gapminder dataset\n\nWarning: package 'dslabs' was built under R version 4.3.3\n\nlibrary(dplyr)    #Data manipulation\n\nWarning: package 'dplyr' was built under R version 4.3.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\n:::\n\nAccessing the documentation for the Gapminder dataset:\n\nThis helps understand the structure and variables included in the dataset\n\nhelp(gapminder)\n\nstarting httpd help server ... done\n\n\n3.Exploring the structure of the gapminder dataset:\nstr() provides a concise summary of the dataset structure showing types of variables and sample data\n\nstr(gapminder)\n\n'data.frame':   10545 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  115.4 148.2 208 NA 59.9 ...\n $ life_expectancy : num  62.9 47.5 36 63 65.4 ...\n $ fertility       : num  6.19 7.65 7.32 4.43 3.11 4.55 4.82 3.45 2.7 5.57 ...\n $ population      : num  1636054 11124892 5270844 54681 20619075 ...\n $ gdp             : num  NA 1.38e+10 NA NA 1.08e+11 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 4 1 1 2 2 3 2 5 4 3 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 19 11 10 2 15 21 2 1 22 21 ...\n\n\n4.Summarizing the gapminder dataset:\nsummary() provides a statistical summary for each variable, useful for initial data assessment\n\nsummary(gapminder)\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586  \n\n\n5.Checking the data type of the gapminder dataset:\nEnsuring that the dataset is a dataframe which is suitable for data manipulation tasks\n\nclass(gapminder)\n\n[1] \"data.frame\"\n\n\n\n\n\n1.Filtering data to include only African countries:\nCreating a new data object africadata to specifically analyze this continent\n\nafricadata &lt;- gapminder[gapminder$continent == \"Africa\", ]\n\n2.Checking the structure of the filtered data\n\nstr(africadata)\n\n'data.frame':   2907 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n $ fertility       : num  7.65 7.32 6.28 6.62 6.29 6.95 5.65 6.89 5.84 6.25 ...\n $ population      : num  11124892 5270844 2431620 524029 4829291 ...\n $ gdp             : num  1.38e+10 NA 6.22e+08 1.24e+08 5.97e+08 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\n\n3.Summarizing the African data subset:\n\nsummary(africadata)\n\n         country          year      infant_mortality life_expectancy\n Algeria     :  57   Min.   :1960   Min.   : 11.40   Min.   :13.20  \n Angola      :  57   1st Qu.:1974   1st Qu.: 62.20   1st Qu.:48.23  \n Benin       :  57   Median :1988   Median : 93.40   Median :53.98  \n Botswana    :  57   Mean   :1988   Mean   : 95.12   Mean   :54.38  \n Burkina Faso:  57   3rd Qu.:2002   3rd Qu.:124.70   3rd Qu.:60.10  \n Burundi     :  57   Max.   :2016   Max.   :237.40   Max.   :77.60  \n (Other)     :2565                  NA's   :226                     \n   fertility       population             gdp               continent   \n Min.   :1.500   Min.   :    41538   Min.   :4.659e+07   Africa  :2907  \n 1st Qu.:5.160   1st Qu.:  1605232   1st Qu.:8.373e+08   Americas:   0  \n Median :6.160   Median :  5570982   Median :2.448e+09   Asia    :   0  \n Mean   :5.851   Mean   : 12235961   Mean   :9.346e+09   Europe  :   0  \n 3rd Qu.:6.860   3rd Qu.: 13888152   3rd Qu.:6.552e+09   Oceania :   0  \n Max.   :8.450   Max.   :182201962   Max.   :1.935e+11                  \n NA's   :51      NA's   :51          NA's   :637                        \n                       region   \n Eastern Africa           :912  \n Western Africa           :912  \n Middle Africa            :456  \n Northern Africa          :342  \n Southern Africa          :285  \n Australia and New Zealand:  0  \n (Other)                  :  0  \n\n\n\n\n\n1.Creating a data object with selected variables:\nWe’ll create two new objects: one containing only infant_mortality and life_expectancy, and the other containing population and life_expectancy.\n\nhealth_data &lt;- africadata[, c(\"infant_mortality\", \"life_expectancy\")]\n\n2.Creating another view focusing on population size and life expectancy\n\npopulation_data &lt;- africadata[, c(\"population\", \"life_expectancy\")]\n\n3.Exploring the structure and summary of these new datasets\n\nstr(health_data)\n\n'data.frame':   2907 obs. of  2 variables:\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n\nsummary(health_data)\n\n infant_mortality life_expectancy\n Min.   : 11.40   Min.   :13.20  \n 1st Qu.: 62.20   1st Qu.:48.23  \n Median : 93.40   Median :53.98  \n Mean   : 95.12   Mean   :54.38  \n 3rd Qu.:124.70   3rd Qu.:60.10  \n Max.   :237.40   Max.   :77.60  \n NA's   :226                     \n\nstr(population_data)\n\n'data.frame':   2907 obs. of  2 variables:\n $ population     : num  11124892 5270844 2431620 524029 4829291 ...\n $ life_expectancy: num  47.5 36 38.3 50.3 35.2 ...\n\nsummary(population_data)\n\n   population        life_expectancy\n Min.   :    41538   Min.   :13.20  \n 1st Qu.:  1605232   1st Qu.:48.23  \n Median :  5570982   Median :53.98  \n Mean   : 12235961   Mean   :54.38  \n 3rd Qu.: 13888152   3rd Qu.:60.10  \n Max.   :182201962   Max.   :77.60  \n NA's   :51                         \n\n\n\n\n\nDocumenting plotting and further analysis helps in understanding the purpose and interpretation of visualizations and statistical results.\n1.Plotting life expectancy vs infant mortality:\n\nplot(africadata$infant_mortality, africadata$life_expectancy, main=\"Life Expectancy vs Infant Mortality\", xlab=\"Infant Mortality\", ylab=\"Life Expectancy\")\n\n\n\n\n\n\n\n\nWe can clearly see a negative correlation indicating higher infant mortality associated with lower life expectancy\n2.Plotting life expectancy vs population size:\nUsing log scale for population to better visualize data across wide range of values\n\nplot(africadata$population, africadata$life_expectancy, main=\"Life Expectancy vs Population Size\", xlab=\"Population \", ylab=\"Life Expectancy\",log=\"x\")\n\n\n\n\n\n\n\n\nGenerally, there is a positive correlation between these two variables. Similar to the previous plot, multiple ‘lines’ composed of closely clustered data points can be observed. These lines represent the data from various countries over successive years, showing either an increase or decrease.\n\n\n\nWe need to determine the years for which the Infant Mortality variable has complete data.\n\nIdentify years with missing data for infant mortality\n\n\nmissing_data_by_year &lt;- africadata %&gt;%\n  group_by(year) %&gt;%\n  summarize(missing_infant_mortality = sum(is.na(infant_mortality)))\n\n\nCalculate total missing values for infant mortality:\n\n\ntotal_missing_infant_mortality &lt;- sum(is.na(africadata$infant_mortality))\nprint(paste(\"Total missing values for infant mortality:\", total_missing_infant_mortality))\n\n[1] \"Total missing values for infant mortality: 226\"\n\n\n\nPrint years with missing data\n\n\nprint(\"Years with missing data for infant mortality:\")\n\n[1] \"Years with missing data for infant mortality:\"\n\nprint(missing_data_by_year)\n\n# A tibble: 57 × 2\n    year missing_infant_mortality\n   &lt;int&gt;                    &lt;int&gt;\n 1  1960                       10\n 2  1961                       17\n 3  1962                       16\n 4  1963                       16\n 5  1964                       15\n 6  1965                       14\n 7  1966                       13\n 8  1967                       11\n 9  1968                       11\n10  1969                        7\n# ℹ 47 more rows\n\n\nAround 1982, the count of missing values (NAs) for the Infant Mortality variable fell to zero and remained so until 2016, when the missing values increased again. Therefore, we should select a year within that range.\n\nFilter data for the year 2000:\n\n\ndata_2000 &lt;- africadata %&gt;%\n  filter(year == 2000)\n\n\nExplore the structure and summary of the dataset for the year 2000:\n\n\nprint(\"Structure of data for the year 2000:\")\n\n[1] \"Structure of data for the year 2000:\"\n\nstr(data_2000)\n\n'data.frame':   51 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...\n $ infant_mortality: num  33.9 128.3 89.3 52.4 96.2 ...\n $ life_expectancy : num  73.3 52.3 57.2 47.6 52.6 46.7 54.3 68.4 45.3 51.5 ...\n $ fertility       : num  2.51 6.84 5.98 3.41 6.59 7.06 5.62 3.7 5.45 7.35 ...\n $ population      : num  31183658 15058638 6949366 1736579 11607944 ...\n $ gdp             : num  5.48e+10 9.13e+09 2.25e+09 5.63e+09 2.61e+09 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\nprint(\"Summary of data for the year 2000:\")\n\n[1] \"Summary of data for the year 2000:\"\n\nsummary(data_2000)\n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0  \n\n\n\n\n\nPlot 1: Life Expectancy vs. Infant Mortality:\n\nplot(data_2000$infant_mortality, data_2000$life_expectancy,\n     main = \"Life Expectancy vs. Infant Mortality (2000)\",\n     xlab = \"Infant Mortality\",\n     ylab = \"Life Expectancy\",\n     pch = 19,col='blue')  # pch = 19 makes the points solid circles\n\n\n\n\n\n\n\n\nPlot 2: Life Expectancy vs. Population Size\n\nplot(data_2000$population, data_2000$life_expectancy,\n     main = \"Life Expectancy vs. Population Size (2000)\",\n     xlab = \"Population Size\",\n     ylab = \"Life Expectancy\",\n     log = \"x\",  # sets the x-axis to logarithmic scale\n     pch = 19, col='red')  # pch = 19 makes the points solid circles\n\n\n\n\n\n\n\n\n\n\n\nUsing linear models to understand the influence of infant mortality and population size on life expectancy\n1.Linear Regression for Life Expectancy vs. Infant Mortality:\n\nfit1 &lt;- lm(life_expectancy ~ infant_mortality, data = data_2000)\nsummary(fit1)  # Outputs the summary of the regression model\n\n\nCall:\nlm(formula = life_expectancy ~ infant_mortality, data = data_2000)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-22.6651  -3.7087   0.9914   4.0408   8.6817 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      71.29331    2.42611  29.386  &lt; 2e-16 ***\ninfant_mortality -0.18916    0.02869  -6.594 2.83e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.221 on 49 degrees of freedom\nMultiple R-squared:  0.4701,    Adjusted R-squared:  0.4593 \nF-statistic: 43.48 on 1 and 49 DF,  p-value: 2.826e-08\n\n\n\n\n\n\nThe goal was to analyze the impact of infant mortality on life expectancy among African countries in the year 2000.\n\n\n\nA linear regression model was fitted with life expectancy as the dependent variable and infant mortality as the predictor.\n\n\n\n\nModel Coefficients:\n\nIntercept: The model estimates a life expectancy of 71.29 years when the infant mortality rate is zero.\nInfant Mortality Coefficient: The negative coefficient of -0.18916 indicates that as infant mortality increases by one unit, life expectancy decreases by approximately 0.189 years.\n\nStatistical Significance:\n\nThe p-value for the infant mortality coefficient is extremely low (&lt; 2.83e-08), suggesting a statistically significant negative impact of infant mortality on life expectancy.\n\nModel Fit:\n\nThe R-squared value of 0.4701 implies that about 47.01% of the variability in life expectancy across the dataset can be explained by differences in infant mortality rates.\n\n\n\n\n\nThe analysis confirms a significant negative correlation between infant mortality and life expectancy for the year 2000 in African countries. This suggests that policies aimed at reducing infant mortality could be effective in increasing life expectancy.\n\n\n\n\n\nUsing logarithmic transformation for population size:\n\nfit2 &lt;- lm(life_expectancy ~ (population), data = data_2000)\nsummary(fit2)  # Outputs the summary of the regression model\n\n\nCall:\nlm(formula = life_expectancy ~ (population), data = data_2000)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-18.429  -4.602  -2.568   3.800  18.802 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 5.593e+01  1.468e+00  38.097   &lt;2e-16 ***\npopulation  2.756e-08  5.459e-08   0.505    0.616    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.524 on 49 degrees of freedom\nMultiple R-squared:  0.005176,  Adjusted R-squared:  -0.01513 \nF-statistic: 0.2549 on 1 and 49 DF,  p-value: 0.6159\n\n\n\n\n\n\nThe aim was to explore whether the size of a population in African countries in the year 2000 impacts life expectancy.\n\n\n\nA linear regression model was employed with life expectancy as the outcome and the population size as the predictor.\n\n\n\n\nModel Coefficients:\n\nIntercept: The model predicts a base life expectancy of 5593 years, adjusting for population size.\nLog(Population) Coefficient: The coefficient of 2.756e-08 suggests a negligible change in life expectancy with increasing population size.\n\nStatistical Significance:\n\nThe p-value for the log of population size is 0.6159, indicating that this model does not find a statistically significant impact of population size on life expectancy.\n\nModel Fit:\n\nThe R-squared value is only 0.005176, highlighting that population size explains a very small fraction of the variability in life expectancy.\nThe negative adjusted R-squared value suggests that the model does not adequately predict life expectancy and might perform worse than a model with no predictors at all.\n\n\n\n\n\nThe analysis indicates that there is no significant correlation between population size and life expectancy among African countries for the year 2000. This suggests that other factors not included in this model might be more influential in determining life expectancy.\n\n\n\n\n\n\n# Loading ggplot2 package for data visualization\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n# In order to determine what datasets are available in the dslabs package (use code below)\n# data(package = \"dslabs\")\n\nAfter reviewing the datasets available, I selected the “temp_carbon” dataset for further exploration. This dataset contains global temperature anomaly data and carbon emissions from the years 1751 through 2018. The goal of this analysis is to examine the relationship between global temperature anomalies and carbon emissions over this extensive time period.\n\n# Loads the temp_carbon dataset from the dslabs package\ndata(\"temp_carbon\")\n\n\n# This provides an overview of the data types and number of observations\nstr(temp_carbon)\n\n'data.frame':   268 obs. of  5 variables:\n $ year            : num  1880 1881 1882 1883 1884 ...\n $ temp_anomaly    : num  -0.11 -0.08 -0.1 -0.18 -0.26 -0.25 -0.24 -0.28 -0.13 -0.09 ...\n $ land_anomaly    : num  -0.48 -0.4 -0.48 -0.66 -0.69 -0.56 -0.51 -0.47 -0.41 -0.31 ...\n $ ocean_anomaly   : num  -0.01 0.01 0 -0.04 -0.14 -0.17 -0.17 -0.23 -0.05 -0.02 ...\n $ carbon_emissions: num  236 243 256 272 275 277 281 295 327 327 ...\n\n# View the summary statistics of the temp_carbon dataset.\nsummary(temp_carbon)\n\n      year       temp_anomaly     land_anomaly      ocean_anomaly     \n Min.   :1751   Min.   :-0.450   Min.   :-0.69000   Min.   :-0.46000  \n 1st Qu.:1818   1st Qu.:-0.180   1st Qu.:-0.31500   1st Qu.:-0.17000  \n Median :1884   Median :-0.030   Median :-0.05000   Median :-0.01000  \n Mean   :1884   Mean   : 0.060   Mean   : 0.07086   Mean   : 0.05273  \n 3rd Qu.:1951   3rd Qu.: 0.275   3rd Qu.: 0.30500   3rd Qu.: 0.25500  \n Max.   :2018   Max.   : 0.980   Max.   : 1.50000   Max.   : 0.79000  \n                NA's   :129      NA's   :129        NA's   :129       \n carbon_emissions \n Min.   :   3.00  \n 1st Qu.:  13.75  \n Median : 264.00  \n Mean   :1522.98  \n 3rd Qu.:1431.50  \n Max.   :9855.00  \n NA's   :4        \n\n\nThe “temp_carbon” dataset contain 268 observations of 5 variables: year, temp_anomaly, land_anomaly, ocean_anomaly, and carbon_emissions. The dataset also contains some missing values (NAs) which will be removed before further analysis.\n\n# This gives a quick glance at the dataset.\nhead(temp_carbon)\n\n  year temp_anomaly land_anomaly ocean_anomaly carbon_emissions\n1 1880        -0.11        -0.48         -0.01              236\n2 1881        -0.08        -0.40          0.01              243\n3 1882        -0.10        -0.48          0.00              256\n4 1883        -0.18        -0.66         -0.04              272\n5 1884        -0.26        -0.69         -0.14              275\n6 1885        -0.25        -0.56         -0.17              277\n\n\n\n# Checking for missing values in the dataset\nsum(is.na(temp_carbon))\n\n[1] 391\n\n# Removing NA's values\ntemp_carbon &lt;- na.omit(temp_carbon)\n\n\n# Plotting the Global Carbon Emissions \nggplot(temp_carbon, aes(x = year, y = carbon_emissions)) +\n  geom_line() +  # Using a line plot to show the trend of carbon emissions\n  labs(title = \"Global temperature anomaly and carbon emissions, 1751-2018\", x = \"Year\", y = \"Carbon Emissions\")  \n\n\n\n\n\n\n\n# Fiting a linear regression model with carbon emissions as the outcome and year as the predictor\nfit_carbon &lt;- lm(carbon_emissions ~ year, data = temp_carbon)\n\n\nsummary(fit_carbon) # The summary of the linear regression model\n\n\nCall:\nlm(formula = carbon_emissions ~ year, data = temp_carbon)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1653.40  -972.22    58.83   582.55  2546.03 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -1.240e+05  4.467e+03  -27.75   &lt;2e-16 ***\nyear         6.518e+01  2.294e+00   28.42   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1039 on 133 degrees of freedom\nMultiple R-squared:  0.8586,    Adjusted R-squared:  0.8575 \nF-statistic: 807.4 on 1 and 133 DF,  p-value: &lt; 2.2e-16\n\n\n\n# Plotting the fitted linear regression line for carbon emissions\nggplot(temp_carbon, aes(x = year, y = carbon_emissions)) +\n  geom_line() +  # Using a line plot to show the trend of carbon emissions\n  geom_abline(slope = fit_carbon$coefficients[2], intercept = fit_carbon$coefficients[1], col = \"red\") +  # Adding a regression line\n  labs(title = \"Linear Regression: Year vs Carbon Emissions\", x = \"Year\", y = \"Carbon Emissions \")  \n\n\n\n\n\n\n\n\nAs we can observe in the plotted graph, there seems to be an increase in Carbon emissions. This is confirmed by the linear regression model. The high R-squared value only further confirms that the model explains a large portion of the variance in carbon emissions. The high levels of Carbon emissions seem to really begin to take off during WWII.\nNote: The red regression line represents the relationship between year and carbon emissions modeled by the linear regression analysis above.\n\n# Plotting the Global Temperature over Time\nggplot(temp_carbon, aes(x = year, y = temp_anomaly)) +\n  geom_line() +  # Ussing a line plot to show the trend of temperature over time\n  labs(title = \"Global Temperature Over Time\", x = \"Year\", y = \"Temperature\")\n\n\n\n\n\n\n\n# Fit a linear regression model to help understand the trend of temperature anomalies over time\nfit_temp &lt;- lm(temp_anomaly ~ year, data = temp_carbon)\n\n\n# Viewing the summary of the linear regression model\nsummary(fit_temp)\n\n\nCall:\nlm(formula = temp_anomaly ~ year, data = temp_carbon)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.30153 -0.11563 -0.01885  0.10930  0.33240 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -1.316e+01  6.560e-01  -20.07   &lt;2e-16 ***\nyear         6.778e-03  3.368e-04   20.12   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.1525 on 133 degrees of freedom\nMultiple R-squared:  0.7528,    Adjusted R-squared:  0.7509 \nF-statistic: 404.9 on 1 and 133 DF,  p-value: &lt; 2.2e-16\n\n\n\n# This plot represents the relationship modeled by the linear regression\nggplot(temp_carbon, aes(x = year, y = temp_anomaly)) +\n  geom_line() +  # adding the line plot to show the trend of temperature anomalies over time\n  geom_abline(slope = fit_temp$coefficients[2], intercept = fit_temp$coefficients[1], col = \"red\") +  # This adds the regression line on the graph\n  labs(title = \"Linear Regression: Year vs Temperature Anomaly\", x = \"Year\", y = \"Temperature\")  \n\n\n\n\n\n\n\n\nAs observed in the plotted graph, temperatures have noticeably increased over time. This upward trend is cause by the surge in carbon emissions. The high R-squared value of 0.7528 suggests a strong relationship between year and temperature anomaly. Additionally, the low p-value ( 2.2e-16) confirms the statistical significance of this relationship, suggesting that the year is a significant predictor of temperature.\nNote: The red line in the plot provides a visual representation of the linear regression model’s prediction of how temperature anomaly changes with each passing year\nIn conclusion, after further analysis and using visualization with linear regression models, I can confirm there exist a significant relationship between increasing carbon emissions and rising temperatures. The linear regression model indicates that temperatures changes on average of 0.0068. Similarly, on average, carbon emissions increases by 6.518e+01 per year."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#regression-analysis-life-expectancy-vs.-infant-mortality-2000",
    "href": "coding-exercise/coding-exercise.html#regression-analysis-life-expectancy-vs.-infant-mortality-2000",
    "title": "R Coding Exercise",
    "section": "",
    "text": "The goal was to analyze the impact of infant mortality on life expectancy among African countries in the year 2000.\n\n\n\nA linear regression model was fitted with life expectancy as the dependent variable and infant mortality as the predictor.\n\n\n\n\nModel Coefficients:\n\nIntercept: The model estimates a life expectancy of 71.29 years when the infant mortality rate is zero.\nInfant Mortality Coefficient: The negative coefficient of -0.18916 indicates that as infant mortality increases by one unit, life expectancy decreases by approximately 0.189 years.\n\nStatistical Significance:\n\nThe p-value for the infant mortality coefficient is extremely low (&lt; 2.83e-08), suggesting a statistically significant negative impact of infant mortality on life expectancy.\n\nModel Fit:\n\nThe R-squared value of 0.4701 implies that about 47.01% of the variability in life expectancy across the dataset can be explained by differences in infant mortality rates.\n\n\n\n\n\nThe analysis confirms a significant negative correlation between infant mortality and life expectancy for the year 2000 in African countries. This suggests that policies aimed at reducing infant mortality could be effective in increasing life expectancy."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#regression-analysis-life-expectancy-vs.-population-size-2000",
    "href": "coding-exercise/coding-exercise.html#regression-analysis-life-expectancy-vs.-population-size-2000",
    "title": "R Coding Exercise",
    "section": "",
    "text": "The aim was to explore whether the size of a population in African countries in the year 2000 impacts life expectancy.\n\n\n\nA linear regression model was employed with life expectancy as the outcome and the population size as the predictor.\n\n\n\n\nModel Coefficients:\n\nIntercept: The model predicts a base life expectancy of 5593 years, adjusting for population size.\nLog(Population) Coefficient: The coefficient of 2.756e-08 suggests a negligible change in life expectancy with increasing population size.\n\nStatistical Significance:\n\nThe p-value for the log of population size is 0.6159, indicating that this model does not find a statistically significant impact of population size on life expectancy.\n\nModel Fit:\n\nThe R-squared value is only 0.005176, highlighting that population size explains a very small fraction of the variability in life expectancy.\nThe negative adjusted R-squared value suggests that the model does not adequately predict life expectancy and might perform worse than a model with no predictors at all.\n\n\n\n\n\nThe analysis indicates that there is no significant correlation between population size and life expectancy among African countries for the year 2000. This suggests that other factors not included in this model might be more influential in determining life expectancy."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#this-section-is-contributed-by-joaquin-ramirez",
    "href": "coding-exercise/coding-exercise.html#this-section-is-contributed-by-joaquin-ramirez",
    "title": "R Coding Exercise",
    "section": "",
    "text": "# Loading ggplot2 package for data visualization\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n# In order to determine what datasets are available in the dslabs package (use code below)\n# data(package = \"dslabs\")\n\nAfter reviewing the datasets available, I selected the “temp_carbon” dataset for further exploration. This dataset contains global temperature anomaly data and carbon emissions from the years 1751 through 2018. The goal of this analysis is to examine the relationship between global temperature anomalies and carbon emissions over this extensive time period.\n\n# Loads the temp_carbon dataset from the dslabs package\ndata(\"temp_carbon\")\n\n\n# This provides an overview of the data types and number of observations\nstr(temp_carbon)\n\n'data.frame':   268 obs. of  5 variables:\n $ year            : num  1880 1881 1882 1883 1884 ...\n $ temp_anomaly    : num  -0.11 -0.08 -0.1 -0.18 -0.26 -0.25 -0.24 -0.28 -0.13 -0.09 ...\n $ land_anomaly    : num  -0.48 -0.4 -0.48 -0.66 -0.69 -0.56 -0.51 -0.47 -0.41 -0.31 ...\n $ ocean_anomaly   : num  -0.01 0.01 0 -0.04 -0.14 -0.17 -0.17 -0.23 -0.05 -0.02 ...\n $ carbon_emissions: num  236 243 256 272 275 277 281 295 327 327 ...\n\n# View the summary statistics of the temp_carbon dataset.\nsummary(temp_carbon)\n\n      year       temp_anomaly     land_anomaly      ocean_anomaly     \n Min.   :1751   Min.   :-0.450   Min.   :-0.69000   Min.   :-0.46000  \n 1st Qu.:1818   1st Qu.:-0.180   1st Qu.:-0.31500   1st Qu.:-0.17000  \n Median :1884   Median :-0.030   Median :-0.05000   Median :-0.01000  \n Mean   :1884   Mean   : 0.060   Mean   : 0.07086   Mean   : 0.05273  \n 3rd Qu.:1951   3rd Qu.: 0.275   3rd Qu.: 0.30500   3rd Qu.: 0.25500  \n Max.   :2018   Max.   : 0.980   Max.   : 1.50000   Max.   : 0.79000  \n                NA's   :129      NA's   :129        NA's   :129       \n carbon_emissions \n Min.   :   3.00  \n 1st Qu.:  13.75  \n Median : 264.00  \n Mean   :1522.98  \n 3rd Qu.:1431.50  \n Max.   :9855.00  \n NA's   :4        \n\n\nThe “temp_carbon” dataset contain 268 observations of 5 variables: year, temp_anomaly, land_anomaly, ocean_anomaly, and carbon_emissions. The dataset also contains some missing values (NAs) which will be removed before further analysis.\n\n# This gives a quick glance at the dataset.\nhead(temp_carbon)\n\n  year temp_anomaly land_anomaly ocean_anomaly carbon_emissions\n1 1880        -0.11        -0.48         -0.01              236\n2 1881        -0.08        -0.40          0.01              243\n3 1882        -0.10        -0.48          0.00              256\n4 1883        -0.18        -0.66         -0.04              272\n5 1884        -0.26        -0.69         -0.14              275\n6 1885        -0.25        -0.56         -0.17              277\n\n\n\n# Checking for missing values in the dataset\nsum(is.na(temp_carbon))\n\n[1] 391\n\n# Removing NA's values\ntemp_carbon &lt;- na.omit(temp_carbon)\n\n\n# Plotting the Global Carbon Emissions \nggplot(temp_carbon, aes(x = year, y = carbon_emissions)) +\n  geom_line() +  # Using a line plot to show the trend of carbon emissions\n  labs(title = \"Global temperature anomaly and carbon emissions, 1751-2018\", x = \"Year\", y = \"Carbon Emissions\")  \n\n\n\n\n\n\n\n# Fiting a linear regression model with carbon emissions as the outcome and year as the predictor\nfit_carbon &lt;- lm(carbon_emissions ~ year, data = temp_carbon)\n\n\nsummary(fit_carbon) # The summary of the linear regression model\n\n\nCall:\nlm(formula = carbon_emissions ~ year, data = temp_carbon)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1653.40  -972.22    58.83   582.55  2546.03 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -1.240e+05  4.467e+03  -27.75   &lt;2e-16 ***\nyear         6.518e+01  2.294e+00   28.42   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1039 on 133 degrees of freedom\nMultiple R-squared:  0.8586,    Adjusted R-squared:  0.8575 \nF-statistic: 807.4 on 1 and 133 DF,  p-value: &lt; 2.2e-16\n\n\n\n# Plotting the fitted linear regression line for carbon emissions\nggplot(temp_carbon, aes(x = year, y = carbon_emissions)) +\n  geom_line() +  # Using a line plot to show the trend of carbon emissions\n  geom_abline(slope = fit_carbon$coefficients[2], intercept = fit_carbon$coefficients[1], col = \"red\") +  # Adding a regression line\n  labs(title = \"Linear Regression: Year vs Carbon Emissions\", x = \"Year\", y = \"Carbon Emissions \")  \n\n\n\n\n\n\n\n\nAs we can observe in the plotted graph, there seems to be an increase in Carbon emissions. This is confirmed by the linear regression model. The high R-squared value only further confirms that the model explains a large portion of the variance in carbon emissions. The high levels of Carbon emissions seem to really begin to take off during WWII.\nNote: The red regression line represents the relationship between year and carbon emissions modeled by the linear regression analysis above.\n\n# Plotting the Global Temperature over Time\nggplot(temp_carbon, aes(x = year, y = temp_anomaly)) +\n  geom_line() +  # Ussing a line plot to show the trend of temperature over time\n  labs(title = \"Global Temperature Over Time\", x = \"Year\", y = \"Temperature\")\n\n\n\n\n\n\n\n# Fit a linear regression model to help understand the trend of temperature anomalies over time\nfit_temp &lt;- lm(temp_anomaly ~ year, data = temp_carbon)\n\n\n# Viewing the summary of the linear regression model\nsummary(fit_temp)\n\n\nCall:\nlm(formula = temp_anomaly ~ year, data = temp_carbon)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.30153 -0.11563 -0.01885  0.10930  0.33240 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -1.316e+01  6.560e-01  -20.07   &lt;2e-16 ***\nyear         6.778e-03  3.368e-04   20.12   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.1525 on 133 degrees of freedom\nMultiple R-squared:  0.7528,    Adjusted R-squared:  0.7509 \nF-statistic: 404.9 on 1 and 133 DF,  p-value: &lt; 2.2e-16\n\n\n\n# This plot represents the relationship modeled by the linear regression\nggplot(temp_carbon, aes(x = year, y = temp_anomaly)) +\n  geom_line() +  # adding the line plot to show the trend of temperature anomalies over time\n  geom_abline(slope = fit_temp$coefficients[2], intercept = fit_temp$coefficients[1], col = \"red\") +  # This adds the regression line on the graph\n  labs(title = \"Linear Regression: Year vs Temperature Anomaly\", x = \"Year\", y = \"Temperature\")  \n\n\n\n\n\n\n\n\nAs observed in the plotted graph, temperatures have noticeably increased over time. This upward trend is cause by the surge in carbon emissions. The high R-squared value of 0.7528 suggests a strong relationship between year and temperature anomaly. Additionally, the low p-value ( 2.2e-16) confirms the statistical significance of this relationship, suggesting that the year is a significant predictor of temperature.\nNote: The red line in the plot provides a visual representation of the linear regression model’s prediction of how temperature anomaly changes with each passing year\nIn conclusion, after further analysis and using visualization with linear regression models, I can confirm there exist a significant relationship between increasing carbon emissions and rising temperatures. The linear regression model indicates that temperatures changes on average of 0.0068. Similarly, on average, carbon emissions increases by 6.518e+01 per year."
  },
  {
    "objectID": "aboutme.html",
    "href": "aboutme.html",
    "title": "About me",
    "section": "",
    "text": "Sri Lakshmi\n\n\nIntroduction\nHi this is Sri Lakshmi Sudha Ganni, I am currently pursuing my Master’s in Data Analytics from UTSA. My background is in chemical engineering with industry experience focused on chemical testing of water and waste water. I am passionate about data analysis and I am looking forward to work in the field of data analytics. As part of my Data Analytics Journey so far I have worked with R, python, SQL and SAS. I have explored machine learning techniques such as support vector machines, natural learning processing, clustering and regression. I have also worked on data visualization using ggplot2 and matplotlib. I have experience in data cleaning, data wrangling, data visualization, statistical analysis and machine learning.\nData Analytics Experience\nI have previously worked on projects focused on analysis of resources available for cancer patients. I am also working on a project which is focused on predicting the price of housing market in San Antonio. I am looking forward to work on more projects and gain more experience in the field of data analytics. I am also looking forward to work on projects which are focused on data visualization and machine learning. I am also interested in learning new technologies and tools in the field of data analytics.\nResearch Interest\nMy Primary area of interest is to work at the intersection of data analytics and chemical engineering. Specially application of machine learning techniques to analyze and discover underlying trends in chemical plant data and material testing.\nInteresting thing About Me\nA quirky and interesting thing about me is My passion for photography, especially focusing on capturing nature and landscapes. It offered a different perspective on observing and interpreting the world around me.\nHobbies\nI love playing Racquetball, trekking and passionate about Photography.\nMachine Learning & Art: Neural Networks for Artistic Use(Link)\nThis video tutorial provides an in-depth look at how neural networks can be used to apply artistic styles to images, a process known as style transfer. It’s a compelling example of how machine learning techniques are being used creatively to blend different artistic styles onto a canvas or photograph, essentially allowing the algorithm to “paint” one picture in the style of another artist."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "\nWelcome to My Website\nSri Lakshmi - DA Portfolio\n",
    "section": "",
    "text": "Welcome to My Website\nSri Lakshmi - DA Portfolio\n\n\n\nIntroduction\nHi, I am Sri Lakshmi Sudha Ganni, currently pursuing my Master’s in Data Analytics from UTSA. My background is in chemical engineering with industry experience focused on chemical testing of water and wastewater. I am passionate about data analysis and looking forward to work in the field of data analytics. Throughout my journey, I have gained proficiency in R, Python, SQL, and SAS. I have explored machine learning techniques such as support vector machines, natural language processing, clustering, and regression, and have worked on data visualization using ggplot2 and matplotlib.\n\n\nData Analytics Experience\nI have worked on projects analyzing resources available for cancer patients and I’m currently focused on predicting the housing market prices in San Antonio. I am eager to work on more projects to enhance my experience in data analytics, especially those focusing on data visualization and machine learning.\n\n\nProjects\n\nCancer Patient health resources Analysis\n\n\n\n\n\n\n\nHousing Market Trends Modeling\n\n\n\nNatural Langugage Processing\n\n\n\n\nResearch Interest\nMy primary area of interest lies at the intersection of data analytics and chemical engineering. Specifically, I am keen on applying machine learning techniques to analyze and discover underlying trends in chemical plant data and material testing.\n\n\nHobbies\nIn my free time, I love playing Racquetball, trekking, and I am passionate about photography."
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "Sri Lakshmi - DA Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda2.html",
    "href": "starter-analysis-exercise/code/eda-code/eda2.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at /Users/venkata/Documents/GitHub/sriganni-P2-portfolio/starter-analysis-exercise\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"data\",\"processed-data\",\"processeddata2.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\nmydata$'Eye Color' = as.factor(mydata$'Eye Color')\ndplyr::glimpse(mydata)\n\nRows: 10\nColumns: 5\n$ Height      &lt;dbl&gt; 180, 175, 178, 183, 156, 166, 165, 133, 166, 154\n$ Weight      &lt;dbl&gt; 80, 70, 76, 55, 90, 110, NA, 45, 55, 50\n$ Gender      &lt;fct&gt; M, O, F, F, O, M, F, F, M, M\n$ Income      &lt;dbl&gt; 70000, 80000, 95000, 85000, 89000, 85000, 110000, 100000, …\n$ `Eye Color` &lt;fct&gt; brown, blue, hazel, blue, green, blue, blue, brown, hazel,…\n\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             10    \nNumber of columns          5     \n_______________________          \nColumn type frequency:           \n  factor                   2     \n  numeric                  3     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique\n1 Gender                0             1 FALSE          3\n2 Eye Color             0             1 FALSE          5\n  top_counts                    \n1 F: 4, M: 4, O: 2              \n2 blu: 4, bro: 2, haz: 2, bla: 1\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate    mean      sd    p0    p25   p50\n1 Height                0           1     166.     15.1   133   158.   166\n2 Weight                1           0.9    70.1    21.2    45    55     70\n3 Income                0           1   87000   14614.  60000 81250  87000\n     p75   p100 hist \n1   177.    183 ▂▁▃▆▇\n2    80     110 ▇▂▃▂▂\n3 95750  110000 ▅▂▇▇▂\n\n# save to file\nsummarytable_file = here(\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram(stat=\"count\")\n\nWarning in geom_histogram(stat = \"count\"): Ignoring unknown parameters:\n`binwidth`, `bins`, and `pad`\n\nplot(p2)\n\nWarning: Removed 1 rows containing non-finite values (`stat_count()`).\n\n\n\n\nfigure_file = here(\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n\n\nWarning: Removed 1 rows containing non-finite values (`stat_count()`).\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 1 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\nfigure_file = here(\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 1 rows containing non-finite values (`stat_smooth()`).\nRemoved 1 rows containing missing values (`geom_point()`).\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 1 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nfigure_file = here(\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 1 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\nBox Plot\n\nboxplotp = ggplot(mydata, aes(x = `Eye Color`, y = Height)) +\n  geom_boxplot()\nplot(boxplotp)\n\n\n\nfigure_file = here(\"results\",\"figures\",\"boxplot.png\")\nggsave(filename=figure_file, plot=boxplotp)\n\nSaving 7 x 5 in image\n\n\nScatter Plot\n\nscatterp = ggplot(mydata, aes(x = Weight, y = Income)) +\n  geom_point()\nplot(scatterp)\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\nfigure_file = here(\"results\",\"figures\",\"scatterplot.png\")\nggsave(filename=figure_file)\n\nSaving 7 x 5 in image\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at /Users/venkata/Documents/GitHub/sriganni-P2-portfolio/starter-analysis-exercise\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"data\",\"raw-data\",\"exampledata.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n4 Income          Individual Income in usd              numeric value &gt;0 or NA\n5 BMI             Body mass index in kg/m2              numeric value &gt;0 or NA\n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n$ Income &lt;dbl&gt; 70000, 80000, 90000, 95000, 75000, 85000, 89000, 85000, 92000, …\n$ BMI    &lt;dbl&gt; 24, 22, 22, 23, 24, 22, 36, 39, 22, 22, 22, 25, 19, 21\n\nsummary(rawdata)\n\n    Height              Weight          Gender              Income      \n Length:14          Min.   :  45.0   Length:14          Min.   : 60000  \n Class :character   1st Qu.:  55.0   Class :character   1st Qu.: 78500  \n Mode  :character   Median :  70.0   Mode  :character   Median : 87000  \n                    Mean   : 602.7                      Mean   : 86071  \n                    3rd Qu.:  90.0                      3rd Qu.: 94250  \n                    Max.   :7000.0                      Max.   :110000  \n                    NA's   :1                                           \n      BMI      \n Min.   :19.0  \n 1st Qu.:22.0  \n Median :22.0  \n Mean   :24.5  \n 3rd Qu.:24.0  \n Max.   :39.0  \n               \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender Income   BMI\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 180        80 M       70000    24\n2 175        70 O       80000    22\n3 sixty      60 F       90000    22\n4 178        76 F       95000    23\n5 192        90 NA      75000    24\n6 6          55 F       85000    22\n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\nIncome\n0\n1.00\n86071.43\n12916.68\n60000\n78500\n87000\n94250\n110000\n▃▆▇▇▂\n\n\nBMI\n0\n1.00\n24.50\n5.72\n19\n22\n22\n24\n39\n▇▂▁▁▂\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nIncome\n0\n1.00\n85769.23\n13392.50\n60000\n78000.00\n85000\n95000\n110000\n▃▆▆▇▂\n\n\nBMI\n0\n1.00\n24.69\n5.91\n19\n22.00\n22\n24\n39\n▇▃▁▁▂\n\n\n\n\nhist(d1$Height)\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nIncome\n0\n1.00\n85769.23\n13392.50\n60000\n78000.00\n85000\n95000\n110000\n▃▆▆▇▂\n\n\nBMI\n0\n1.00\n24.69\n5.91\n19\n22.00\n22\n24\n39\n▇▃▁▁▂\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179.0\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85.0\n110\n▇▂▃▃▂\n\n\nIncome\n0\n1\n84272.73\n12166.27\n60000\n77500.0\n85000\n93500.0\n100000\n▂▃▂▇▆\n\n\nBMI\n0\n1\n25.18\n6.34\n19\n22.0\n23\n24.5\n39\n▇▃▁▁▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179.0\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85.0\n110\n▇▂▃▃▂\n\n\nIncome\n0\n1\n84272.73\n12166.27\n60000\n77500.0\n85000\n93500.0\n100000\n▂▃▂▇▆\n\n\nBMI\n0\n1\n25.18\n6.34\n19\n22.0\n23\n24.5\n39\n▇▃▁▁▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nIncome\n0\n1\n84444.44\n12914.25\n60000\n80000\n85000\n95000\n100000\n▂▂▂▇▇\n\n\nBMI\n0\n1\n25.67\n6.96\n19\n22\n23\n25\n39\n▇▃▁▁▃\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "Sri Lakshmi - DA Portfolio",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "Sri Lakshmi - DA Portfolio",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "Sri Lakshmi - DA Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "Sri Lakshmi - DA Portfolio",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "Sri Lakshmi - DA Portfolio",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "data-exercise/data-exercise.html",
    "href": "data-exercise/data-exercise.html",
    "title": "Vehicle Fleet Fuel Economy Analysis using DNN - Data-exercise",
    "section": "",
    "text": "The primary objective of this assignment is to analyze images of a fleet of vehicles to quantify the fuel consumption and greenhouse gas (GHG) footprint of the fleet, both as a whole and categorized by vehicle type.\nTo achieve this, we utilized the ResNet50 image classifier, a pretrained open-source deep neural network, to process a set of 50 images representing the vehicle fleet. The ResNet50 model, deployed in TensorFlow, identified the type of vehicle in each image. This data was then used to create a frequency distribution table for the vehicle types present in the dataset. We combined this data with fuel economy figures from the Environmental Protection Agency (EPA). The resulting analysis allowed us to calculate the fuel consumption and GHG footprint of the fleet, broken down by vehicle and fuel types. Figure shows the flowchart of the overall process implemented in the project :"
  },
  {
    "objectID": "data-exercise/data-exercise.html#quarto",
    "href": "data-exercise/data-exercise.html#quarto",
    "title": "data-exercise",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "data-exercise/data-exercise.html#running-code",
    "href": "data-exercise/data-exercise.html#running-code",
    "title": "data-exercise",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\nFor this Assignment , I have taken complex data type which is cars images and did some exploratory analysis.This Quarto document demonstrates an analysis of images of cars using deep learning models and combines it with an exploration of fuel economy data from the Environmental Protection Agency(EPA)."
  },
  {
    "objectID": "data-exercise/data-exercise.html#libraries-and-setup",
    "href": "data-exercise/data-exercise.html#libraries-and-setup",
    "title": "Vehicle Fleet Fuel Economy Analysis using DNN - Data-exercise",
    "section": "Libraries and Setup:",
    "text": "Libraries and Setup:\nSeveral libraries are loaded at the beginning primarily tensorflow and keras for image classification and ggplot for visualization:\n\nlibrary(keras)\nlibrary(tensorflow)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readxl)\nlibrary(ggplot2)\nlibrary(car)\n\nLoading required package: carData\n\nAttaching package: 'car'\n\nThe following object is masked from 'package:dplyr':\n\n    recode\n\nThe following object is masked from 'package:purrr':\n\n    some\n\nlibrary(jpeg)"
  },
  {
    "objectID": "data-exercise/data-exercise.html#model-initialization",
    "href": "data-exercise/data-exercise.html#model-initialization",
    "title": "Vehicle Fleet Fuel Economy Analysis using DNN - Data-exercise",
    "section": "Model Initialization:",
    "text": "Model Initialization:\nA pre-trained ResNet50 model is loaded with weights from ImageNet. Resnet50 was chosen since it provided a good trade off in terms of accuracy vs computational speed\n\nmodel &lt;- application_resnet50(weights = 'imagenet')"
  },
  {
    "objectID": "data-exercise/data-exercise.html#image-directory-and-object-count-initialization",
    "href": "data-exercise/data-exercise.html#image-directory-and-object-count-initialization",
    "title": "Vehicle Fleet Fuel Economy Analysis using DNN - Data-exercise",
    "section": "Image Directory and Object Count Initialization:",
    "text": "Image Directory and Object Count Initialization:\nThe directory containing car images and an empty list to store object counts are specified. Train contains 50 images of cars. Some sample images are plotted here :\n\nimg_dir &lt;- 'train3'\n\n\nobject_counts &lt;- list()\n\n\nimg_dir2 &lt;- here::here(\"data-exercise\",\"train3\")\n\n# List all files in the directory\nall_files &lt;- list.files(img_dir, pattern = \"\\\\.jpg$|\\\\.jpeg$|\\\\.png$\", full.names = TRUE)\n\n# Select four random image files\nset.seed(123)  # For reproducibility\nrandom_images &lt;- sample(all_files, 4)\n\n# Initialize counter for vehicle labels\nvehicle_counter &lt;- 1\n\n# Plot the images in a 2x2 grid\npar(mfrow = c(2, 2), mar = c(1, 1, 2, 1))\n\nfor (img_path in random_images) {\n  # Read the image\n  img &lt;- readJPEG(img_path)\n  \n  # Plot the image\n  plot(1:2, type = 'n', main = paste(\"Vehicle\", vehicle_counter), xlab = \"\", ylab = \"\", axes = FALSE)\n  rasterImage(img, 1, 1, 2, 2)\n  \n    # Increment the counter\n  vehicle_counter &lt;- vehicle_counter + 1\n}"
  },
  {
    "objectID": "data-exercise/data-exercise.html#image-processing-function",
    "href": "data-exercise/data-exercise.html#image-processing-function",
    "title": "Vehicle Fleet Fuel Economy Analysis using DNN - Data-exercise",
    "section": "Image Processing Function:",
    "text": "Image Processing Function:\nA function to process each image, make predictions, and decode the results is defined:\n\nprocess_image &lt;- function(img_path) {\n  tryCatch({\n    img &lt;- image_load(img_path, target_size = c(224, 224))\n    img_array &lt;- image_to_array(img)\n    img_array &lt;- array_reshape(img_array, c(1, 224, 224, 3))\n    img_array &lt;- imagenet_preprocess_input(img_array)\n    \n    # Predict the image class\n    predictions &lt;- model %&gt;% predict(img_array)\n    decoded_predictions &lt;- imagenet_decode_predictions(predictions, top = 3)[[1]]\n    while (sink.number() &gt; 0) {\n      sink(NULL)\n     }\n    return(decoded_predictions)\n  }, error = function(e) {\n    print(paste(\"Error processing image\", img_path, \":\", e$message))\n    return(NULL)\n  })\n}"
  },
  {
    "objectID": "data-exercise/data-exercise.html#image-processing-and-object-counting",
    "href": "data-exercise/data-exercise.html#image-processing-and-object-counting",
    "title": "Vehicle Fleet Fuel Economy Analysis using DNN - Data-exercise",
    "section": "Image Processing and Object Counting:",
    "text": "Image Processing and Object Counting:\nEach image in the directory is processed, and the counts of recognized objects are recorded:\nfiltered_object_counts\n\n# Process each image\nfor (img_name in list.files(img_dir)) {\n  img_path &lt;- file.path(img_dir, img_name)\n  predictions &lt;- process_image(img_path)\n  if (length(predictions) &gt; 0) {\n    t&lt;-predictions[2]\n      label &lt;- t$class_description[1]\n     if (is.null(object_counts[[label]])) {\n        object_counts[[label]] &lt;- 0\n      }\n      object_counts[[label]] &lt;- object_counts[[label]] + 1\n  }\n}\n\n1/1 - 1s - 553ms/epoch - 553ms/step\n\n# Filter out objects with count less than 4\n#filtered_object_counts &lt;- object_counts[sapply(object_counts, function(x) x &gt; 2)]\n\n# If object_counts is empty, ensure filtered_object_counts has at least one entry\nif (length(object_counts) == 0) {\n  # Add a placeholder entry if object_counts is empty\n  filtered_object_counts &lt;- list(\"pickup\" = 0)\n}else{\n  # Filter out objects with count less than 4\nfiltered_object_counts &lt;- object_counts[sapply(object_counts, function(x) x &gt; 2)]\n}\n\n# Print the counts of each type of animal\nfiltered_object_counts\n\n$cab\n[1] 3\n\n$convertible\n[1] 4\n\n$beach_wagon\n[1] 5\n\n$limousine\n[1] 3\n\n$pickup\n[1] 4\n\n$sports_car\n[1] 6"
  },
  {
    "objectID": "data-exercise/data-exercise.html#visualization-of-recognized-objects",
    "href": "data-exercise/data-exercise.html#visualization-of-recognized-objects",
    "title": "Vehicle Fleet Fuel Economy Analysis using DNN - Data-exercise",
    "section": "Visualization of Recognized Objects:",
    "text": "Visualization of Recognized Objects:\nA bar plot is created to visualize the frequency of recognized objects:\n\nobjects &lt;- names(filtered_object_counts)\ncounts &lt;- unlist(filtered_object_counts)\n\nggplot(data.frame(Object = objects, Count = counts), aes(x = reorder(Object, Count), y = Count)) +\n  geom_bar(stat = 'identity', fill = 'skyblue') +\n  coord_flip() +\n  labs(x = 'Frequency', y = 'Object', title = 'Frequency of Recognized Objects') +\n  theme_minimal()"
  },
  {
    "objectID": "data-exercise/data-exercise.html#fuel-economy-data-processing",
    "href": "data-exercise/data-exercise.html#fuel-economy-data-processing",
    "title": "Vehicle Fleet Fuel Economy Analysis using DNN - Data-exercise",
    "section": "Fuel Economy Data Processing:",
    "text": "Fuel Economy Data Processing:\nFuel economy data is read from an Excel file (EPA data) and cleaned:\n\ndata_clean &lt;- read_excel('FE_EPA.xlsx', skip = 2)\n\nNew names:\n• `` -&gt; `...1`\n\ndata_clean &lt;- data_clean[, -c(1, 1)]\nnames(data_clean) &lt;- c('Vehicle Type', 'mpg Gasoline', 'mpg Diesel', 'Source')\ndata_clean &lt;- data_clean[1:11, ]"
  },
  {
    "objectID": "data-exercise/data-exercise.html#mapping-categories-and-merging-data",
    "href": "data-exercise/data-exercise.html#mapping-categories-and-merging-data",
    "title": "Vehicle Fleet Fuel Economy Analysis using DNN - Data-exercise",
    "section": "Mapping Categories and Merging Data:",
    "text": "Mapping Categories and Merging Data:\nCategories are mapped to the recognized objects and merged with the fuel economy data:\n\ncategories &lt;- c(\n  'beach_wagon' = 'Passenger Vehicle',\n  'cab' = 'Service Vehicle',\n  'car_wheel' = 'Passenger Vehicle',\n  'convertible' = 'Performance Vehicle',\n  'limousine' = 'Service Vehicle',\n  'minivan' = 'Passenger Vehicle',\n  'pickup' = 'Utility Vehicle',\n  'sports_car' = 'Performance Vehicle'\n)\n\n# Create DataFrame from filtered_object_counts\nvehicle_counts_df &lt;- data.frame(\n  `Vehicle Type` = names(filtered_object_counts),\n  Count = unlist(filtered_object_counts)\n)\n\nvehicle_counts_df$Category &lt;- sapply(vehicle_counts_df$`Vehicle.Type`, function(x) categories[[x]])\n\n# Map categories to types in the existing dataset\nexcel_categories &lt;- list(\n  'Passenger Vehicle' = c('Car'),\n  'Service Vehicle' = c('Transit Bus'),\n  'Performance Vehicle' = c('Car'),\n  'Utility Vehicle' = c('Delivery Truck')\n)\n\n# Matching categories to types\nvehicle_counts_df$`Excel Match` &lt;- sapply(vehicle_counts_df$Category, function(x) excel_categories[[x]][1])\n\n# Merge with fuel economy data\nmerged_data &lt;- merge(vehicle_counts_df, data_clean, by.x = 'Excel Match', by.y = 'Vehicle Type', all.x = TRUE)\n\n# Calculate annual fuel consumption and emissions\nmerged_data$`Annual Gasoline Consumption` &lt;- (20000 / merged_data$`mpg Gasoline`) * merged_data$Count\nmerged_data$`Annual Diesel Consumption` &lt;- (20000 / merged_data$`mpg Diesel`) * merged_data$Count\nCO2_per_gallon_gasoline &lt;- 8887  # grams of CO2 per gallon for gasoline\nCO2_per_gallon_diesel &lt;- 10180  # grams of CO2 per gallon for diesel\nmerged_data$`CO2 Emissions Gasoline (grams)` &lt;- merged_data$`Annual Gasoline Consumption` * CO2_per_gallon_gasoline\nmerged_data$`CO2 Emissions Diesel (grams)` &lt;- merged_data$`Annual Diesel Consumption` * CO2_per_gallon_diesel"
  },
  {
    "objectID": "data-exercise/data-exercise.html#visualization-of-fuel-consumption-and-emissions",
    "href": "data-exercise/data-exercise.html#visualization-of-fuel-consumption-and-emissions",
    "title": "Vehicle Fleet Fuel Economy Analysis using DNN - Data-exercise",
    "section": "Visualization of Fuel Consumption and Emissions:",
    "text": "Visualization of Fuel Consumption and Emissions:\nSeveral bar plots visualize annual fuel consumption and CO2 emissions by vehicle type:\n\n# Annual Gasoline and Diesel Consumption by Vehicle Type\nggplot(merged_data, aes(x = reorder(`Vehicle.Type`, `Annual Gasoline Consumption`), y = `Annual Gasoline Consumption`)) +\n  geom_bar(stat = 'identity', fill = 'blue') +\n  coord_flip() +\n  labs(title = 'Annual Gasoline Consumption by Vehicle Type', x = 'Vehicle Type', y = 'Gasoline Consumption') +\n  theme_minimal()\n\n\n\nggplot(merged_data, aes(x = reorder(`Vehicle.Type`, `Annual Diesel Consumption`), y = `Annual Diesel Consumption`)) +\n  geom_bar(stat = 'identity', fill = 'green') +\n  coord_flip() +\n  labs(title = 'Annual Diesel Consumption by Vehicle Type', x = 'Vehicle Type', y = 'Diesel Consumption') +\n  theme_minimal()\n\n\n\n# CO2 Emissions from Gasoline and Diesel by Vehicle Type\nggplot(merged_data, aes(x = reorder(`Vehicle.Type`, `CO2 Emissions Gasoline (grams)`), y = `CO2 Emissions Gasoline (grams)`)) +\n  geom_bar(stat = 'identity', fill = 'red') +\n  coord_flip() +\n  labs(title = 'CO2 Emissions from Gasoline by Vehicle Type', x = 'Vehicle Type', y = 'CO2 Emissions (grams)') +\n  theme_minimal()\n\n\n\nggplot(merged_data, aes(x = reorder(`Vehicle.Type`, `CO2 Emissions Diesel (grams)`), y = `CO2 Emissions Diesel (grams)`)) +\n  geom_bar(stat = 'identity', fill = 'brown') +\n  coord_flip() +\n  labs(title = 'CO2 Emissions from Diesel by Vehicle Type', x = 'Vehicle Type', y = 'CO2 Emissions (grams)') +\n  theme_minimal()"
  },
  {
    "objectID": "data-exercise/data-exercise.html#additional-analysis",
    "href": "data-exercise/data-exercise.html#additional-analysis",
    "title": "Vehicle Fleet Fuel Economy Analysis using DNN - Data-exercise",
    "section": "Additional Analysis:",
    "text": "Additional Analysis:\nBox plots, summary statistics, and scatter plots provide further insights into the fuel economy and GHG emmissions of the given fleet of vehicles by fuel type and vehicle type:\n\n# Box Plot of Annual Gasoline Consumption\nggplot(merged_data, aes(x = Vehicle.Type, y = `Annual Gasoline Consumption`)) +\n  geom_boxplot() +\n  labs(title = 'Box Plot of Annual Gasoline Consumption', x = '', y = 'Gasoline Consumption') +\n  theme_minimal()\n\n\n\n# Summary statistics for gasoline and diesel consumption\nsummary(merged_data$`Annual Gasoline Consumption`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3279    4303    8329    9906   16211   17701 \n\nsummary(merged_data$`Annual Diesel Consumption`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2902    3808    7371    8767   14347   15666 \n\n# Scatter Plot of Gasoline vs Diesel Consumption\nggplot(merged_data, aes(x = `Annual Gasoline Consumption`, y = `Annual Diesel Consumption`)) +\n  geom_point(color = 'blue') +\n  labs(title = 'Scatter Plot of Gasoline vs Diesel Consumption', x = 'Annual Gasoline Consumption', y = 'Annual Diesel Consumption') +\n  theme_minimal()"
  },
  {
    "objectID": "data-exercise/data-exercise.html#qq-plot-for-normality-check",
    "href": "data-exercise/data-exercise.html#qq-plot-for-normality-check",
    "title": "Vehicle Fleet Fuel Economy Analysis using DNN - Data-exercise",
    "section": "QQ Plot for Normality Check:",
    "text": "QQ Plot for Normality Check:\nA QQ plot is used to check the normality of the annual gasoline consumption:\n\n# QQ Plot for Annual Gasoline Consumption\nqqPlot(merged_data$`Annual Gasoline Consumption`, main = \"QQ Plot for Annual Gasoline Consumption\")\n\n\n\n\n[1] 5 6\n\nqqPlot(merged_data$`Annual Diesel Consumption`, main = \"QQ Plot for Annual Diesel Consumption\")\n\n\n\n\n[1] 5 6"
  },
  {
    "objectID": "data-exercise/data-exercise.html#introduction",
    "href": "data-exercise/data-exercise.html#introduction",
    "title": "Vehicle Fleet Fuel Economy Analysis using DNN - Data-exercise",
    "section": "",
    "text": "The primary objective of this assignment is to analyze images of a fleet of vehicles to quantify the fuel consumption and greenhouse gas (GHG) footprint of the fleet, both as a whole and categorized by vehicle type.\nTo achieve this, we utilized the ResNet50 image classifier, a pretrained open-source deep neural network, to process a set of 50 images representing the vehicle fleet. The ResNet50 model, deployed in TensorFlow, identified the type of vehicle in each image. This data was then used to create a frequency distribution table for the vehicle types present in the dataset. We combined this data with fuel economy figures from the Environmental Protection Agency (EPA). The resulting analysis allowed us to calculate the fuel consumption and GHG footprint of the fleet, broken down by vehicle and fuel types. Figure shows the flowchart of the overall process implemented in the project :"
  },
  {
    "objectID": "data-exercise/data-exercise.html#conclusion",
    "href": "data-exercise/data-exercise.html#conclusion",
    "title": "Vehicle Fleet Fuel Economy Analysis using DNN - Data-exercise",
    "section": "Conclusion",
    "text": "Conclusion\nBased on the analysis, we can conclude that commercial vehicles and pickup trucks have up to 50% higher fuel consumption and greenhouse gas (GHG) emissions compared to cars. The visualizations support this by showing that limousines and cabs have the highest annual gasoline and diesel consumption, followed closely by pickup trucks. The high fuel consumption of commercial vehicles is due to their higher mileage, while pickup trucks have higher fuel consumption due to lower efficiency.\nAdditionally, the plots indicate that vehicles like sports cars and beach wagons have lower fuel consumption compared to commercial vehicles and pickup trucks. Diesel vehicles within the same category are shown to be more efficient than gasoline vehicles, leading to better fuel economy and relatively lower CO2 emissions. The bar plots for CO2 emissions from gasoline and diesel consumption reinforce the finding that limousines and cabs emit the most CO2, followed by pickup trucks, sports cars, and beach wagons.\nThe specific insights from the plots are as follows:\nAnnual Gasoline Consumption: Limousines and cabs show the highest consumption, followed by pickup trucks.\nAnnual Diesel Consumption: Limousines and cabs again lead in consumption, with pickup trucks also showing significant diesel use.\nCO2 Emissions from Gasoline: Limousines and cabs produce the most emissions, followed by pickup trucks and sports cars.\nCO2 Emissions from Diesel: Limousines and cabs remain the highest emitters, with pickup trucks and sports cars also contributing significantly.\nThese findings highlight the higher environmental impact of commercial vehicles and pickup trucks compared to other vehicle types.\nWe successfully identified vehicle types from the given image data set and quantified their distribution by type using Resnet in tensorflow environment. Additionally, we classified the vehicles based on their fuel type, allowing us to assess the fuel economy of gasoline and diesel vehicles using summary statistics and scatter plots. The EPA data was instrumental in converting frequency distribution data into actual fuel economy figures and GHG emissions. This tool can be further refined to efficiently quantify fuel consumption and related expenses using images of existing vehicle fleets. Its capability to process images also makes it adaptable for analyzing real-time traffic camera data to quantify GHG emissions and pollution levels in urban environments."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html",
    "href": "cdcdata-exercise/cdcdata-exercise.html",
    "title": "Exploratory Data Analysis of NCHS Data",
    "section": "",
    "text": "Brief Decription of the Data:\nTitle: NCHS - Death rates and life expectancy at birth\nDescription: we will explore a dataset from the National Center for Health Statistics (NCHS) that contains information about death rates and life expectancy at birth. Our goal is to clean the data, perform exploratory data analysis (EDA), and summarize the variables by their distributions.\nThis dataset of U.S. mortality trends since 1900 highlights the differences in age-adjusted death rates and life expectancy at birth by race and sex.\nAge-adjusted death rates (deaths per 100,000) after 1998 are calculated based on the 2000 U.S. standard population. Populations used for computing death rates for 2011–2017 are postcensal estimates based on the 2010 census, estimated as of July 1, 2010. Rates for census years are based on populations enumerated in the corresponding censuses. Rates for noncensus years between 2000 and 2010 are revised using updated intercensal population estimates and may differ from rates previously published. Data on age-adjusted death rates prior to 1999 are taken from historical data (see References below).\nLife expectancy data are available up to 2017. Due to changes in categories of race used in publications, data are not available for the black population consistently before 1968, and not at all before 1960. More information on historical data on age-adjusted death rates is available at https://www.cdc.gov/nchs/nvss/mortality/hist293.htm.\nSources: CDC/NCHS, National Vital Statistics System, historical data, 1900-1998 (see https://www.cdc.gov/nchs/nvss/mortality_historical_data.htm); CDC/NCHS, National Vital Statistics System, mortality data (see http://www.cdc.gov/nchs/deaths.htm); and CDC WONDER (see http://wonder.cdc.gov).\n\n\n\n# Load necessary libraries\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(tidyr)\nlibrary(here)\n\nhere() starts at /Users/srilakshmi/Documents/GitHub/sriganni-P2-portfolio\n\n\n\n\n\n\n# Read the data\nfile_path &lt;- here(\"cdcdata-exercise\",\"NCHS_-_Death_rates_and_life_expectancy_at_birth_20240701.csv\")\ndata &lt;- read_csv(file_path)\n\nRows: 1071 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Race, Sex\ndbl (3): Year, Average Life Expectancy (Years), Age-adjusted Death Rate\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\nhead(data)\n\n# A tibble: 6 × 5\n   Year Race      Sex        Average Life Expectancy (Y…¹ Age-adjusted Death R…²\n  &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;                             &lt;dbl&gt;                  &lt;dbl&gt;\n1  1900 All Races Both Sexes                         47.3                  2518 \n2  1901 All Races Both Sexes                         49.1                  2473.\n3  1902 All Races Both Sexes                         51.5                  2301.\n4  1903 All Races Both Sexes                         50.5                  2379 \n5  1904 All Races Both Sexes                         47.6                  2502.\n6  1905 All Races Both Sexes                         48.7                  2424.\n# ℹ abbreviated names: ¹​`Average Life Expectancy (Years)`,\n#   ²​`Age-adjusted Death Rate`\n\n\n\n\n\n\nstr(data)\n\nspc_tbl_ [1,071 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Year                           : num [1:1071] 1900 1901 1902 1903 1904 ...\n $ Race                           : chr [1:1071] \"All Races\" \"All Races\" \"All Races\" \"All Races\" ...\n $ Sex                            : chr [1:1071] \"Both Sexes\" \"Both Sexes\" \"Both Sexes\" \"Both Sexes\" ...\n $ Average Life Expectancy (Years): num [1:1071] 47.3 49.1 51.5 50.5 47.6 48.7 48.7 47.6 51.1 52.1 ...\n $ Age-adjusted Death Rate        : num [1:1071] 2518 2473 2301 2379 2502 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Year = col_double(),\n  ..   Race = col_character(),\n  ..   Sex = col_character(),\n  ..   `Average Life Expectancy (Years)` = col_double(),\n  ..   `Age-adjusted Death Rate` = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\n\n\n\n\n\n\n\ndata &lt;- data %&gt;%\n  filter_all(any_vars(!is.na(.)))\n\n\n\n\n\ndata &lt;- data %&gt;%\n  mutate_if(is.numeric, ~na_if(., 999))\n\n\n\n\n\nselected_data &lt;- data %&gt;%\n  select(Year, Sex, Race, \"Average Life Expectancy (Years)\", \"Age-adjusted Death Rate\")\n\n\n\n\n\n\n\n\nsummary(selected_data)\n\n      Year          Sex                Race          \n Min.   :1900   Length:1071        Length:1071       \n 1st Qu.:1929   Class :character   Class :character  \n Median :1959   Mode  :character   Mode  :character  \n Mean   :1959                                        \n 3rd Qu.:1989                                        \n Max.   :2018                                        \n                                                     \n Average Life Expectancy (Years) Age-adjusted Death Rate\n Min.   :29.1                    Min.   : 611.3         \n 1st Qu.:57.1                    1st Qu.:1013.0         \n Median :66.8                    Median :1513.7         \n Mean   :64.5                    Mean   :1593.1         \n 3rd Qu.:73.9                    3rd Qu.:2057.2         \n Max.   :81.4                    Max.   :3845.7         \n NA's   :6                                              \n\n\n\n\nWe’ll start by summarizing the categorical variables (Sex and Race) by showing the percentage of each category.\n\ncat_summary_sex &lt;- selected_data %&gt;%\n  group_by(Sex) %&gt;%\n  summarize(count = n()) %&gt;%\n  mutate(percentage = count / sum(count) * 100)\n\ncat_summary_race &lt;- selected_data %&gt;%\n  group_by(Race) %&gt;%\n  summarize(count = n()) %&gt;%\n  mutate(percentage = count / sum(count) * 100)\n\nprint(cat_summary_sex)\n\n# A tibble: 3 × 3\n  Sex        count percentage\n  &lt;chr&gt;      &lt;int&gt;      &lt;dbl&gt;\n1 Both Sexes   357       33.3\n2 Female       357       33.3\n3 Male         357       33.3\n\nprint(cat_summary_race)\n\n# A tibble: 3 × 3\n  Race      count percentage\n  &lt;chr&gt;     &lt;int&gt;      &lt;dbl&gt;\n1 All Races   357       33.3\n2 Black       357       33.3\n3 White       357       33.3\n\n\nSex Distribution: The dataset is evenly distributed across the sex categories: Both Sexes, Female, and Male. Each category represents 33.33% of the total dataset with 357 entries each. This balanced representation ensures an unbiased analysis across sexes.\nRace Distribution: The dataset is equally divided among the race categories: All Races, Black, and White, with each category comprising 33.33% of the total dataset (357 entries each). This equal distribution ensures comprehensive analysis across races.\n\n\n\n\n\ncat_summary &lt;- selected_data %&gt;%\n  group_by(Sex, Race) %&gt;%\n  summarize(count = n(), .groups = 'drop') %&gt;%\n  mutate(percentage = count / sum(count) * 100)\ncat_summary\n\n# A tibble: 9 × 4\n  Sex        Race      count percentage\n  &lt;chr&gt;      &lt;chr&gt;     &lt;int&gt;      &lt;dbl&gt;\n1 Both Sexes All Races   119       11.1\n2 Both Sexes Black       119       11.1\n3 Both Sexes White       119       11.1\n4 Female     All Races   119       11.1\n5 Female     Black       119       11.1\n6 Female     White       119       11.1\n7 Male       All Races   119       11.1\n8 Male       Black       119       11.1\n9 Male       White       119       11.1\n\n\n\n\n\nNext, we’ll summarize the continuous variables (Age-adjusted Death Rate and Average Life Expectancy (Years)) by plotting their distributions and calculating their mean and standard deviation.\n\n\n\n\nggplot(selected_data, aes(x = `Age-adjusted Death Rate`)) +\n  geom_histogram(binwidth = 50, fill = \"blue\", color = \"black\") +\n  labs(title = \"Distribution of Age-adjusted Death Rates\", x = \"Age-adjusted Death Rate\", y = \"Frequency\")\n\n\n\n\nThe histogram shows age-adjusted death rates ranging from 0 to 4000, with the highest frequencies. The frequency decreases as the death rate increases, indicating fewer occurrences at higher death rates.This visualization helps identify the concentration and spread of death rates within the population, highlighting areas with the most common and least common death rates.\n\n\n\n\ndeath_rate_summary &lt;- selected_data %&gt;%\n  summarize(mean = mean(`Age-adjusted Death Rate`, na.rm = TRUE),\n            sd = sd(`Age-adjusted Death Rate`, na.rm = TRUE))\n\nprint(death_rate_summary)\n\n# A tibble: 1 × 2\n   mean    sd\n  &lt;dbl&gt; &lt;dbl&gt;\n1 1593.  682.\n\n\nThe summary statistics table provides the mean and standard deviation for the age-adjusted death rates. The mean age-adjusted death rate is approximately 1593.06, with a standard deviation of 682.37. This indicates that the average death rate is around 1593 deaths per 100,000 population, with considerable variability across the dataset.\n\n\n\n\nggplot(selected_data, aes(x = `Average Life Expectancy (Years)`)) +\n  geom_histogram(binwidth = 1, fill = \"green\", color = \"black\") +\n  labs(title = \"Distribution of Life Expectancy\", x = \"Life Expectancy (Years)\", y = \"Frequency\")\n\nWarning: Removed 6 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\nThe histogram illustrates the distribution of average life expectancy in the dataset, ranging from approximately 30 to 85 years. The frequency peaks around 70 years, indicating a higher number of occurrences in this range. This visualization helps identify the spread and concentration of life expectancy across the population, highlighting areas with the highest and lowest frequencies.\n\n\n\n\nlife_expectancy_summary &lt;- selected_data %&gt;%\n  summarize(mean = mean(`Average Life Expectancy (Years)`, na.rm = TRUE),\n            sd = sd(`Average Life Expectancy (Years)`, na.rm = TRUE))\n\nprint(life_expectancy_summary)\n\n# A tibble: 1 × 2\n   mean    sd\n  &lt;dbl&gt; &lt;dbl&gt;\n1  64.5  11.8\n\n\nThe summary statistics table for average life expectancy shows a mean of 64.50 years and a standard deviation of 11.84 years. This indicates that the average life expectancy in the dataset is approximately 64.5 years, with a variability of about 11.8 years across the data points.\n\n\n\nWe’ll also create boxplots to visualize the distribution of Age-adjusted Death Rate by Sex and Average Life Expectancy (Years) by Race.\n\n\n\n\nggplot(selected_data, aes(x = Sex, y = `Age-adjusted Death Rate`, fill = Sex)) +\n  geom_boxplot() +\n  labs(title = \"Boxplot of Age-adjusted Death Rate by Sex\", x = \"Sex\", y = \"Age-adjusted Death Rate\")\n\n\n\n\nThe boxplot shows the distribution of age-adjusted death rates across different sex categories: Both Sexes, Female, and Male.\n1.The median death rate for Both Sexes and Females is lower compared to Males.\n2.The interquartile range (IQR) is similar for Both Sexes and Females but slightly larger for Males, indicating more variability in the male category.\n3.There are several outliers in the Male category, suggesting that there are some instances of unusually high death rates.\nThis visualization highlights the differences in death rates among the sex categories, with males showing higher median and more variability in death rates.\n\n\n\n\nggplot(selected_data, aes(x = Race, y = `Average Life Expectancy (Years)`, fill = Race)) +\n  geom_boxplot() +\n  labs(title = \"Boxplot of Average Life Expectancy by Race\", x = \"Race\", y = \"Average Life Expectancy (Years)\")\n\nWarning: Removed 6 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nThe boxplot compares average life expectancy across race categories: All Races, Black, and White.\n1.The median life expectancy is similar for All Races and White categories, slightly lower for Black.\n2.The interquartile range is largest for the White category, indicating more variability.\n3.The Black category shows the lowest median.\nThis visualization highlights the differences in life expectancy across races, with the White category exhibiting the highest variability.\n\n\n\n\n\n\n# Load necessary libraries\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(tidyr)\nlibrary(here)\nlibrary(synthpop)\n\nFind out more at https://www.synthpop.org.uk/\n\n\n\n\n\n\n# Load Sri's cleaned and processed data\nfile_path &lt;- here(\"cdcdata-exercise\", \"NCHS_-_Death_rates_and_life_expectancy_at_birth_20240701.csv\")\noriginal_data &lt;- read_csv(file_path)\n\nRows: 1071 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Race, Sex\ndbl (3): Year, Average Life Expectancy (Years), Age-adjusted Death Rate\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Rename columns to remove spaces\noriginal_data &lt;- original_data %&gt;%\n  rename(Average_Life_Expectancy_Years = `Average Life Expectancy (Years)`,\n         Age_adjusted_Death_Rate = `Age-adjusted Death Rate`)\n\n# Generate synthetic data using synthpop\nset.seed(123)\nsynthetic_data &lt;- syn(original_data)$syn\n\n\nVariable(s): Race, Sex have been changed for synthesis from character to factor.\n\nSynthesis\n-----------\n Year Race Sex Average_Life_Expectancy_Years Age_adjusted_Death_Rate\n\n\n\n\n\n\nhead(synthetic_data)\n\n  Year      Race        Sex Average_Life_Expectancy_Years\n1 1900     White Both Sexes                          49.1\n2 1939     Black Both Sexes                          51.7\n3 2011     Black Both Sexes                          75.5\n4 1951 All Races     Female                          71.1\n5 1991     White     Female                          78.8\n6 1997     Black Both Sexes                          71.8\n  Age_adjusted_Death_Rate\n1                  2447.9\n2                  2384.3\n3                   849.3\n4                  1271.8\n5                   737.9\n6                  1135.7\n\n\n\n\n\n\nstr(synthetic_data)\n\n'data.frame':   1071 obs. of  5 variables:\n $ Year                         : num  1900 1939 2011 1951 1991 ...\n $ Race                         : chr  \"White\" \"Black\" \"Black\" \"All Races\" ...\n $ Sex                          : chr  \"Both Sexes\" \"Both Sexes\" \"Both Sexes\" \"Female\" ...\n $ Average_Life_Expectancy_Years: num  49.1 51.7 75.5 71.1 78.8 71.8 81.3 77.7 66.8 47.3 ...\n $ Age_adjusted_Death_Rate      : num  2448 2384 849 1272 738 ...\n\n\n\n\n\n\nIn this section, I will perform some exploratory/descriptive analysis on the synthetic dataset, similar to Sri’s analysis.\n\n\n\nsummary(synthetic_data)\n\n      Year          Race               Sex           \n Min.   :1900   Length:1071        Length:1071       \n 1st Qu.:1930   Class :character   Class :character  \n Median :1959   Mode  :character   Mode  :character  \n Mean   :1959                                        \n 3rd Qu.:1988                                        \n Max.   :2018                                        \n                                                     \n Average_Life_Expectancy_Years Age_adjusted_Death_Rate\n Min.   :29.10                 Min.   : 611.3         \n 1st Qu.:58.30                 1st Qu.: 991.1         \n Median :66.80                 Median :1532.0         \n Mean   :64.64                 Mean   :1587.4         \n 3rd Qu.:73.90                 3rd Qu.:2005.6         \n Max.   :81.40                 Max.   :3654.7         \n NA's   :4                                            \n\n\n\n\n\nI will summarize the categorical variables (e.g., Sex and Race) by showing the percentage of each category.\n\ncat_summary_sex &lt;- synthetic_data %&gt;%\n  group_by(Sex) %&gt;%\n  summarize(count = n()) %&gt;%\n  mutate(percentage = count / sum(count) * 100)\n\ncat_summary_race &lt;- synthetic_data %&gt;%\n  group_by(Race) %&gt;%\n  summarize(count = n()) %&gt;%\n  mutate(percentage = count / sum(count) * 100)\n\nprint(cat_summary_sex)\n\n# A tibble: 3 × 3\n  Sex        count percentage\n  &lt;chr&gt;      &lt;int&gt;      &lt;dbl&gt;\n1 Both Sexes   349       32.6\n2 Female       363       33.9\n3 Male         359       33.5\n\nprint(cat_summary_race)\n\n# A tibble: 3 × 3\n  Race      count percentage\n  &lt;chr&gt;     &lt;int&gt;      &lt;dbl&gt;\n1 All Races   349       32.6\n2 Black       357       33.3\n3 White       365       34.1\n\n\n\n\n\n\ncat_summary &lt;- synthetic_data %&gt;%\n  group_by(Sex, Race) %&gt;%\n  summarize(count = n(), .groups = 'drop') %&gt;%\n  mutate(percentage = count / sum(count) * 100)\ncat_summary\n\n# A tibble: 9 × 4\n  Sex        Race      count percentage\n  &lt;chr&gt;      &lt;chr&gt;     &lt;int&gt;      &lt;dbl&gt;\n1 Both Sexes All Races   117      10.9 \n2 Both Sexes Black        94       8.78\n3 Both Sexes White       138      12.9 \n4 Female     All Races   125      11.7 \n5 Female     Black       138      12.9 \n6 Female     White       100       9.34\n7 Male       All Races   107       9.99\n8 Male       Black       125      11.7 \n9 Male       White       127      11.9 \n\n\n\n\n\nNext, I will summarize the continuous variables (Age_adjusted_Death_Rate and Average_Life_Expectancy_Years) by plotting their distributions and calculating their mean and standard deviation.\n\n\n\n\nggplot(synthetic_data, aes(x = Age_adjusted_Death_Rate)) +\n  geom_histogram(binwidth = 50, fill = \"red\", color = \"orange\") +\n  labs(title = \"Distribution of Age-adjusted Death Rates (Synthetic Data)\", x = \"Age-adjusted Death Rate\", y = \"Frequency\")\n\n\n\n\n\n\n\n\nThis histogram shows the distribution of age-adjusted death rates in the synthetic dataset. The x-axis represents the age-adjusted death rates, while the y-axis shows the frequency of these rates.\n\n\n\n\nThe histogram displays a right-skewed distribution, with a peak around the lower values of death rates.\nMost of the synthetic data points have death rates concentrated between 500 to 1500, with decreasing frequency as the death rates increase.\nThe synthetic data mirrors the distribution characteristics observed in the original dataset, maintaining a similar skewness and concentration of values.\n\n\n\n\n\n\n\ndeath_rate_summary &lt;- synthetic_data %&gt;%\n  summarize(mean = mean(Age_adjusted_Death_Rate, na.rm = TRUE),\n            sd = sd(Age_adjusted_Death_Rate, na.rm = TRUE))\n\nprint(death_rate_summary)\n\n     mean       sd\n1 1587.39 676.0813\n\n\n\n\n\n\nggplot(synthetic_data, aes(x = Average_Life_Expectancy_Years)) +\n  geom_histogram(binwidth = 1, fill = \"blue\", color = \"lightblue\") +\n  labs(title = \"Distribution of Average Life Expectancy (Years) (Synthetic Data)\", x = \"Average Life Expectancy (Years)\", y = \"Frequency\")\n\nWarning: Removed 4 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\n\n\n\n\nThis histogram illustrates the distribution of average life expectancy in the synthetic dataset. The x-axis represents the average life expectancy in years, and the y-axis shows the frequency of these values.\n\n\n\n\nThe histogram reveals a distribution with a peak around 70 years, indicating a higher frequency of data points in this range.\nThe distribution is somewhat bimodal, with another smaller peak around 60 years.\nThe synthetic data closely follows the distribution observed in the original dataset, with a similar concentration of values around 70 years and a similar spread of life expectancy values.\n\n\n\n\n\n\n\nlife_expectancy_summary &lt;- synthetic_data %&gt;%\n  summarize(mean = mean(Average_Life_Expectancy_Years, na.rm = TRUE),\n            sd = sd(Average_Life_Expectancy_Years, na.rm = TRUE))\n\nprint(life_expectancy_summary)\n\n      mean       sd\n1 64.64227 11.75375\n\n\n\n\n\nI will also create boxplots to visualize the distribution of Age_adjusted_Death_Rate by Sex and Average_Life_Expectancy_Years by Race.\n\n\n\n\nggplot(synthetic_data, aes(x = Sex, y = Age_adjusted_Death_Rate, fill = Sex)) +\n  geom_boxplot() +\n  labs(title = \"Boxplot of Age-adjusted Death Rate by Sex (Synthetic Data)\", x = \"Sex\", y = \"Age-adjusted Death Rate\")\n\n\n\n\n\n\n\n\nThis boxplot compares the distribution of age-adjusted death rates across different sex categories in the synthetic dataset: Both Sexes, Female, and Male.\n\n\n\n\nThe median death rate for both sexes and females is lower compared to males, consistent with the original data.\nThe interquartile range (IQR) for males is slightly larger, indicating more variability in this category.\nThere are several outliers in the male category, suggesting instances of unusually high death rates, which is also consistent with the original data.\nThe boxplot confirms that the synthetic data maintains the same distribution characteristics and variability as observed in the original dataset.\n\n\n\n\n\n\n\nggplot(synthetic_data, aes(x = Race, y = Average_Life_Expectancy_Years, fill = Race)) +\n  geom_boxplot() +\n  labs(title = \"Boxplot of Average Life Expectancy (Years) by Race (Synthetic Data)\", x = \"Race\", y = \"Average Life Expectancy (Years)\")\n\nWarning: Removed 4 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\nThis boxplot visualizes the distribution of average life expectancy across race categories in the synthetic dataset: All Races, Black, and White.\n\n\n\n\nThe median life expectancy is similar for All Races and White categories, slightly lower for Black, consistent with the original data.\nThe interquartile range is largest for the White category, indicating more variability in this group.\nThe Black category shows the lowest median life expectancy.\nThe synthetic data successfully mimics the distribution characteristics of the original dataset, including the central tendencies and variability across race categories.\n\n\n\n\n\n\n\nIn this analysis, I successfully generated synthetic data based on the original cleaned dataset provided by Sri. I then performed exploratory data analysis (EDA) on the synthetic data, producing summary statistics, histograms, and boxplots to compare with the original data. This approach helps ensure the synthetic data closely mimics the characteristics and distributions of the original data, enabling further analysis and modeling.\n\n\n\n\nData Cleaning: I started by loading Sri’s original data and renaming columns to avoid spaces, which synthpop requires for generating synthetic data correctly.\nSynthetic Data Generation: Using the synthpop package, I generated a synthetic dataset based on the original data. The synthetic data retains the structure and distribution of the original dataset.\nExploratory Data Analysis (EDA): I conducted a similar EDA on the synthetic data as Sri did on the original data, including summary statistics, histograms, and boxplots.\nComparison: The EDA of the synthetic data closely mirrors the original data, demonstrating that the synthetic data maintains similar distributions and relationships among variables. This is crucial for ensuring that any analysis or modeling performed on the synthetic data would yield results similar to those obtained from the original data.\n\nBy generating and analyzing synthetic data, I can share and analyze sensitive datasets without compromising privacy, ensuring that the synthetic data provides a reliable stand-in for the original dataset. This approach allows us to conduct meaningful analyses and derive insights while protecting the confidentiality of the original data."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#summary-of-categorical-variables",
    "href": "cdcdata-exercise/cdcdata-exercise.html#summary-of-categorical-variables",
    "title": "Exploratory Data Analysis of NCHS Data",
    "section": "",
    "text": "We’ll start by summarizing the categorical variables (Sex and Race) by showing the percentage of each category.\n\ncat_summary_sex &lt;- selected_data %&gt;%\n  group_by(Sex) %&gt;%\n  summarize(count = n()) %&gt;%\n  mutate(percentage = count / sum(count) * 100)\n\ncat_summary_race &lt;- selected_data %&gt;%\n  group_by(Race) %&gt;%\n  summarize(count = n()) %&gt;%\n  mutate(percentage = count / sum(count) * 100)\n\nprint(cat_summary_sex)\n\n# A tibble: 3 × 3\n  Sex        count percentage\n  &lt;chr&gt;      &lt;int&gt;      &lt;dbl&gt;\n1 Both Sexes   357       33.3\n2 Female       357       33.3\n3 Male         357       33.3\n\nprint(cat_summary_race)\n\n# A tibble: 3 × 3\n  Race      count percentage\n  &lt;chr&gt;     &lt;int&gt;      &lt;dbl&gt;\n1 All Races   357       33.3\n2 Black       357       33.3\n3 White       357       33.3\n\n\nSex Distribution: The dataset is evenly distributed across the sex categories: Both Sexes, Female, and Male. Each category represents 33.33% of the total dataset with 357 entries each. This balanced representation ensures an unbiased analysis across sexes.\nRace Distribution: The dataset is equally divided among the race categories: All Races, Black, and White, with each category comprising 33.33% of the total dataset (357 entries each). This equal distribution ensures comprehensive analysis across races."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#summary-statistics-1",
    "href": "cdcdata-exercise/cdcdata-exercise.html#summary-statistics-1",
    "title": "Exploratory Data Analysis of NCHS Data",
    "section": "",
    "text": "summary(synthetic_data)\n\n      Year          Race               Sex           \n Min.   :1900   Length:1071        Length:1071       \n 1st Qu.:1930   Class :character   Class :character  \n Median :1959   Mode  :character   Mode  :character  \n Mean   :1959                                        \n 3rd Qu.:1988                                        \n Max.   :2018                                        \n                                                     \n Average_Life_Expectancy_Years Age_adjusted_Death_Rate\n Min.   :29.10                 Min.   : 611.3         \n 1st Qu.:58.30                 1st Qu.: 991.1         \n Median :66.80                 Median :1532.0         \n Mean   :64.64                 Mean   :1587.4         \n 3rd Qu.:73.90                 3rd Qu.:2005.6         \n Max.   :81.40                 Max.   :3654.7         \n NA's   :4"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#summary-of-categorical-variables-1",
    "href": "cdcdata-exercise/cdcdata-exercise.html#summary-of-categorical-variables-1",
    "title": "Exploratory Data Analysis of NCHS Data",
    "section": "",
    "text": "I will summarize the categorical variables (e.g., Sex and Race) by showing the percentage of each category.\n\ncat_summary_sex &lt;- synthetic_data %&gt;%\n  group_by(Sex) %&gt;%\n  summarize(count = n()) %&gt;%\n  mutate(percentage = count / sum(count) * 100)\n\ncat_summary_race &lt;- synthetic_data %&gt;%\n  group_by(Race) %&gt;%\n  summarize(count = n()) %&gt;%\n  mutate(percentage = count / sum(count) * 100)\n\nprint(cat_summary_sex)\n\n# A tibble: 3 × 3\n  Sex        count percentage\n  &lt;chr&gt;      &lt;int&gt;      &lt;dbl&gt;\n1 Both Sexes   349       32.6\n2 Female       363       33.9\n3 Male         359       33.5\n\nprint(cat_summary_race)\n\n# A tibble: 3 × 3\n  Race      count percentage\n  &lt;chr&gt;     &lt;int&gt;      &lt;dbl&gt;\n1 All Races   349       32.6\n2 Black       357       33.3\n3 White       365       34.1"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#distribution-of-categorical-variables-1",
    "href": "cdcdata-exercise/cdcdata-exercise.html#distribution-of-categorical-variables-1",
    "title": "Exploratory Data Analysis of NCHS Data",
    "section": "",
    "text": "cat_summary &lt;- synthetic_data %&gt;%\n  group_by(Sex, Race) %&gt;%\n  summarize(count = n(), .groups = 'drop') %&gt;%\n  mutate(percentage = count / sum(count) * 100)\ncat_summary\n\n# A tibble: 9 × 4\n  Sex        Race      count percentage\n  &lt;chr&gt;      &lt;chr&gt;     &lt;int&gt;      &lt;dbl&gt;\n1 Both Sexes All Races   117      10.9 \n2 Both Sexes Black        94       8.78\n3 Both Sexes White       138      12.9 \n4 Female     All Races   125      11.7 \n5 Female     Black       138      12.9 \n6 Female     White       100       9.34\n7 Male       All Races   107       9.99\n8 Male       Black       125      11.7 \n9 Male       White       127      11.9"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#continuous-variables-1",
    "href": "cdcdata-exercise/cdcdata-exercise.html#continuous-variables-1",
    "title": "Exploratory Data Analysis of NCHS Data",
    "section": "",
    "text": "Next, I will summarize the continuous variables (Age_adjusted_Death_Rate and Average_Life_Expectancy_Years) by plotting their distributions and calculating their mean and standard deviation."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#plot-distribution-of-age_adjusted_death_rate",
    "href": "cdcdata-exercise/cdcdata-exercise.html#plot-distribution-of-age_adjusted_death_rate",
    "title": "Exploratory Data Analysis of NCHS Data",
    "section": "",
    "text": "ggplot(synthetic_data, aes(x = Age_adjusted_Death_Rate)) +\n  geom_histogram(binwidth = 50, fill = \"red\", color = \"orange\") +\n  labs(title = \"Distribution of Age-adjusted Death Rates (Synthetic Data)\", x = \"Age-adjusted Death Rate\", y = \"Frequency\")\n\n\n\n\n\n\n\n\nThis histogram shows the distribution of age-adjusted death rates in the synthetic dataset. The x-axis represents the age-adjusted death rates, while the y-axis shows the frequency of these rates.\n\n\n\n\nThe histogram displays a right-skewed distribution, with a peak around the lower values of death rates.\nMost of the synthetic data points have death rates concentrated between 500 to 1500, with decreasing frequency as the death rates increase.\nThe synthetic data mirrors the distribution characteristics observed in the original dataset, maintaining a similar skewness and concentration of values."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#summary-statistics-for-age_adjusted_death_rate",
    "href": "cdcdata-exercise/cdcdata-exercise.html#summary-statistics-for-age_adjusted_death_rate",
    "title": "Exploratory Data Analysis of NCHS Data",
    "section": "",
    "text": "death_rate_summary &lt;- synthetic_data %&gt;%\n  summarize(mean = mean(Age_adjusted_Death_Rate, na.rm = TRUE),\n            sd = sd(Age_adjusted_Death_Rate, na.rm = TRUE))\n\nprint(death_rate_summary)\n\n     mean       sd\n1 1587.39 676.0813"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#plot-distribution-of-average_life_expectancy_years",
    "href": "cdcdata-exercise/cdcdata-exercise.html#plot-distribution-of-average_life_expectancy_years",
    "title": "Exploratory Data Analysis of NCHS Data",
    "section": "",
    "text": "ggplot(synthetic_data, aes(x = Average_Life_Expectancy_Years)) +\n  geom_histogram(binwidth = 1, fill = \"blue\", color = \"lightblue\") +\n  labs(title = \"Distribution of Average Life Expectancy (Years) (Synthetic Data)\", x = \"Average Life Expectancy (Years)\", y = \"Frequency\")\n\nWarning: Removed 4 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\n\n\n\n\nThis histogram illustrates the distribution of average life expectancy in the synthetic dataset. The x-axis represents the average life expectancy in years, and the y-axis shows the frequency of these values.\n\n\n\n\nThe histogram reveals a distribution with a peak around 70 years, indicating a higher frequency of data points in this range.\nThe distribution is somewhat bimodal, with another smaller peak around 60 years.\nThe synthetic data closely follows the distribution observed in the original dataset, with a similar concentration of values around 70 years and a similar spread of life expectancy values."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#summary-statistics-for-average_life_expectancy_years",
    "href": "cdcdata-exercise/cdcdata-exercise.html#summary-statistics-for-average_life_expectancy_years",
    "title": "Exploratory Data Analysis of NCHS Data",
    "section": "",
    "text": "life_expectancy_summary &lt;- synthetic_data %&gt;%\n  summarize(mean = mean(Average_Life_Expectancy_Years, na.rm = TRUE),\n            sd = sd(Average_Life_Expectancy_Years, na.rm = TRUE))\n\nprint(life_expectancy_summary)\n\n      mean       sd\n1 64.64227 11.75375"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#boxplots-1",
    "href": "cdcdata-exercise/cdcdata-exercise.html#boxplots-1",
    "title": "Exploratory Data Analysis of NCHS Data",
    "section": "",
    "text": "I will also create boxplots to visualize the distribution of Age_adjusted_Death_Rate by Sex and Average_Life_Expectancy_Years by Race."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#boxplot-of-age_adjusted_death_rate-by-sex",
    "href": "cdcdata-exercise/cdcdata-exercise.html#boxplot-of-age_adjusted_death_rate-by-sex",
    "title": "Exploratory Data Analysis of NCHS Data",
    "section": "",
    "text": "ggplot(synthetic_data, aes(x = Sex, y = Age_adjusted_Death_Rate, fill = Sex)) +\n  geom_boxplot() +\n  labs(title = \"Boxplot of Age-adjusted Death Rate by Sex (Synthetic Data)\", x = \"Sex\", y = \"Age-adjusted Death Rate\")\n\n\n\n\n\n\n\n\nThis boxplot compares the distribution of age-adjusted death rates across different sex categories in the synthetic dataset: Both Sexes, Female, and Male.\n\n\n\n\nThe median death rate for both sexes and females is lower compared to males, consistent with the original data.\nThe interquartile range (IQR) for males is slightly larger, indicating more variability in this category.\nThere are several outliers in the male category, suggesting instances of unusually high death rates, which is also consistent with the original data.\nThe boxplot confirms that the synthetic data maintains the same distribution characteristics and variability as observed in the original dataset."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#boxplot-of-average_life_expectancy_years-by-race",
    "href": "cdcdata-exercise/cdcdata-exercise.html#boxplot-of-average_life_expectancy_years-by-race",
    "title": "Exploratory Data Analysis of NCHS Data",
    "section": "",
    "text": "ggplot(synthetic_data, aes(x = Race, y = Average_Life_Expectancy_Years, fill = Race)) +\n  geom_boxplot() +\n  labs(title = \"Boxplot of Average Life Expectancy (Years) by Race (Synthetic Data)\", x = \"Race\", y = \"Average Life Expectancy (Years)\")\n\nWarning: Removed 4 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\nThis boxplot visualizes the distribution of average life expectancy across race categories in the synthetic dataset: All Races, Black, and White.\n\n\n\n\nThe median life expectancy is similar for All Races and White categories, slightly lower for Black, consistent with the original data.\nThe interquartile range is largest for the White category, indicating more variability in this group.\nThe Black category shows the lowest median life expectancy.\nThe synthetic data successfully mimics the distribution characteristics of the original dataset, including the central tendencies and variability across race categories."
  }
]